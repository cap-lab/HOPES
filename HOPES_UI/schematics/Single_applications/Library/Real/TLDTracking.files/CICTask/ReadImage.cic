/************************************
 *
 * File : ReadImage.cic
 * Date : Aug 13, 2015 5:16 PM
 *
*************************************/

// Intergration of OpenTLD.cpp, ImAcq.h/cpp, Main.h/cpp Config.h/cpp

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <string>
#include <cstdio>
#include <cstdlib>

#include <opencv/cv.h>
#include <opencv2/opencv.hpp>
#include <opencv/highgui.h>

#include "format.h"

// headers for image processing


// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////


typedef struct
{
    cv::VideoCapture *capture;
    int lastFrame;
    int currentFrame;
    int startFrame;
    int camNo;
    double startTime;
    float fps;
} ImAcq ;

ImAcq *imAcqAlloc() {
    ImAcq *imAcq = (ImAcq *) malloc(sizeof(ImAcq));
    imAcq->currentFrame = 1;
    imAcq->lastFrame = 0;
    imAcq->camNo = 0;
    imAcq->fps = 24;
    return imAcq;
}

void imAcqInit(ImAcq *imAcq) {
#ifndef CAP_GET_LOG
    imAcq->capture = new cv::VideoCapture(imAcq->camNo);
#else
	FILE *fp = fopen("learningData/vInfo.txt", "r");
	char fn[50];
	fscanf(fp, "%s ", fn);
	fclose(fp);
	std::string filename = fn;
	imAcq->capture = new cv::VideoCapture(filename);
#endif
    if (imAcq->capture == NULL) {
        printf("Error: Unable to initialize camera\n");
        exit(0);
    }
    
    imAcq->capture->set(CV_CAP_PROP_FRAME_WIDTH, imgWidth);
    imAcq->capture->set(CV_CAP_PROP_FRAME_HEIGHT, imgHeight);
    
    imAcq->startFrame = imAcq->currentFrame;
    imAcq->startTime = cvGetTickCount();
}


void imAcqFree(ImAcq *imAcq) {

    free(imAcq);
}

void imAcqAdvance(ImAcq *imAcq) {
    imAcq->currentFrame++;
}

cv::Mat imAcqGrab(cv::VideoCapture *capture) {
    cv::Mat frame;

    bool bSuccess = capture->read(frame);

    if (!bSuccess) {
        printf("Error: Unable to grab image from video\n");
        return frame;
    }

    return frame.clone();
}

cv::Mat imAcqGetImg(ImAcq *imAcq) {

    cv::Mat img;

    img = imAcqGrab(imAcq->capture);

    imAcqAdvance(imAcq);

    return img;
}

// ##DEFINE_PORT_SECTION::START
STATIC int port_complete;
STATIC int port_out;
STATIC int port_out_d;
// ##DEFINE_PORT_SECTION::END


// ImAcq.cpp
STATIC int start;
STATIC ImAcq *capImAcq;
//STATIC IplImage *img;
STATIC cv::Mat capImg;
STATIC CapMatColor capMat;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_complete = PORT_INITIALIZE(TASK_ID, "complete");
    port_out = PORT_INITIALIZE(TASK_ID, "out");
// ##INIT_PORT_SECTION::END
    capImAcq = imAcqAlloc();
    imAcqInit(capImAcq);
    //set CAM No (default setting : 0) - ex: capImAcq->camNo = 1;
    // TODO: task initialize code
    // set camera stream and height * width
    start = 0;
	cv::namedWindow("Input", CV_WINDOW_AUTOSIZE);
#ifdef CAP_GET_LOG
    capImg = imAcqGetImg(capImAcq);
    capImg = imAcqGetImg(capImAcq);
    capImg = imAcqGetImg(capImAcq);
    capImg = imAcqGetImg(capImAcq);
    capImg = imAcqGetImg(capImAcq);
#endif
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    MQ_RECEIVE(port_complete, (unsigned char *)&start, sizeof(int));
#ifdef CAP_DEBUG
    printf("ReadImage_Go function\n");
	struct timespec start, end;
	clock_gettime(CLOCK_MONOTONIC,&start);
#endif
    
	// TODO: task main code
	cv::Mat img = imAcqGetImg(capImAcq);
	//imshow("Input",capImg);
	if(imgWidth != img.cols || imgHeight != img.rows)	
	   cv::resize(img, capImg, cv::Size(imgWidth, imgHeight));
	else capImg = img;
	
	//capImg = grey.clone();
	//imshow("Input",grey);    
	//cv::waitKey(5000);

    memcpy(capMat.data, capImg.data, imgHeight*imgWidth*3);
    
#ifdef CAP_DEBUG
	clock_gettime(CLOCK_MONOTONIC,&end);
	uint64_t diff = BILLION * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
    printf("ReadImage_Go function END - time spent : %llu\n", (long long unsigned int) diff / 1000);
#endif
    MQ_SEND(port_out, (unsigned char*)&capMat, sizeof(CapMatColor));
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    imAcqFree(capImAcq);
}

TASK_CODE_END
