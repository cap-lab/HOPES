/************************************
 *
 * File : Test.cic
 * Date : Apr 11, 2020 3:15 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <math.h>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END

#define SIZE 256

typedef enum _FUNC_RETURN_CODE { RET_SUCCESS, RET_FAILURE } func_ret_t;

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

STATIC int port_in1;
STATIC int port_in2;

STATIC float *m;
STATIC float *mm;
STATIC float *tmp;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    UFPort_Initialize(TASK_ID, "in1", &port_in1);
    UFPort_Initialize(TASK_ID, "in2", &port_in2);
    
    m = (float*)malloc(sizeof(float) * SIZE * SIZE);
    mm = (float*)malloc(sizeof(float) * SIZE * SIZE);
    tmp = (float *)malloc(sizeof(float) * SIZE * SIZE);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

func_ret_t lud_verify(float *m, float *lu, int matrix_dim) {
    int i, j, k;
    
    for (i = 0; i < matrix_dim; i++)
        for (j = 0; j < matrix_dim; j++) {
            float sum = 0;
            float l, u;
            for (k = 0; k <= MIN(i, j); k++) {
                if (i == k)
                    l = 1;
                else
                    l = lu[i * matrix_dim + k];
                u = lu[k * matrix_dim + j];
                sum += l * u;
            }
            tmp[i * matrix_dim + j] = sum;
        }

    //    printf(">>>>>LU<<<<<<<\n"); 
    //    for (i=0; i<matrix_dim; i++){ 
    //      for (j=0; j<matrix_dim;j++){ 
    //          printf("%f ", lu[i*matrix_dim+j]); 
    //      } 
    //      printf("\n"); 
    //    } 
    //    printf(">>>>>result<<<<<<<\n"); 
    //    for (i=0; i<matrix_dim; i++){ 
    //      for (j=0; j<matrix_dim;j++){ 
    //          printf("%f ", tmp[i*matrix_dim+j]); 
    //      } 
    //      printf("\n"); 
    //    } 
    //    printf(">>>>>input<<<<<<<\n"); 
    //    for (i=0; i<matrix_dim; i++){ 
    //      for (j=0; j<matrix_dim;j++){ 
    //          printf("%f ", m[i*matrix_dim+j]); 
    //      } 
    //      printf("\n"); 
    //    } 

    for (i = 0; i < matrix_dim; i++) {
        for (j = 0; j < matrix_dim; j++) {
            if (fabs(m[i * matrix_dim + j] - tmp[i * matrix_dim + j]) > 0.0001)
                printf("dismatch at (%d, %d): (o)%f (n)%f\n", i, j,
                        m[i * matrix_dim + j], tmp[i * matrix_dim + j]);
        }
    }
}

TASK_GO
{
    // TODO: task main code
    int result, nDataRead = 0;
        
    result = UFPort_ReadFromQueue(port_in1, (unsigned char *)m, sizeof(float)*SIZE*SIZE, THIS_THREAD_ID, &nDataRead);
    result = UFPort_ReadFromQueue(port_in2, (unsigned char *)mm, sizeof(float)*SIZE*SIZE, THIS_THREAD_ID, &nDataRead);
    
    lud_verify(mm, m, SIZE);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    free(m);
    free(mm);
    free(tmp);
}

TASK_CODE_END
