/************************************
 *
 * File : f.cic
 * Date : Jun 21, 2020 8:32 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_in;
STATIC int port_out;
STATIC int port_out_sim_iteration;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

typedef float FLOAT;
STATIC int grid_rows = 1024;
STATIC int grid_cols = 1024;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in = PORT_INITIALIZE(TASK_ID, "in");
    port_out = PORT_INITIALIZE(TASK_ID, "out");
    port_out_sim_iteration = PORT_INITIALIZE(TASK_ID, "out_sim_iteration");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code

}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
	uem_result uemResult;
    int nDataRead, nDataWrite;
	int sim_iteration;
	UFLoop_GetIteration(THIS_TASK_ID, THIS_THREAD_ID, &sim_iteration);	
	FLOAT *temperature = (FLOAT *)calloc(grid_rows * grid_cols, sizeof(FLOAT));
	uemResult = UFPort_ReadFromQueue(port_in, (unsigned char *) temperature, grid_rows * grid_cols * sizeof(FLOAT), 0, &nDataRead);
	if(sim_iteration == 100){		
		uemResult = UFPort_WriteToQueue(port_out, (unsigned char *) temperature, grid_rows * grid_cols * sizeof(FLOAT), 0, &nDataWrite);		
		UFLoop_StopNextIteration(THIS_TASK_ID);
	}
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
	// TODO: task wrapup code

}

TASK_CODE_END
