/************************************
 *
 * File : ComputeTemperature.cic
 * Date : Jun 19, 2020 12:02 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
typedef float FLOAT;

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END
/* maximum power density possible (say 300W for a 10mm x 10mm chip) */
#define MAX_PD (3.0e6)
/* required precision in degrees    */
#define PRECISION 0.001
#define SPEC_HEAT_SI 1.75e6
#define K_SI 100
/* capacitance fitting factor   */
#define FACTOR_CHIP 0.5
/* chip parameters  */
const FLOAT t_chip = 0.0005;
const FLOAT chip_height = 0.016;
const FLOAT chip_width = 0.016;


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////
typedef float FLOAT;

STATIC int grid_rows = 1024;
STATIC int grid_cols = 1024;

typedef struct _coefficient
{
    FLOAT Rx_1;
    FLOAT Ry_1;
    FLOAT Rz_1;
    FLOAT Cap_1;
} Coefficient;

// ##DEFINE_PORT_SECTION::START
STATIC int port_in_power;
STATIC int port_in_temperature;
STATIC int port_out_power;
STATIC int port_out_temperature;
STATIC int port_out_coefficient;
STATIC int port_out_sim_iteration;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in_power = PORT_INITIALIZE(TASK_ID, "in_power");
    port_in_temperature = PORT_INITIALIZE(TASK_ID, "in_temperature");
    port_out_power = PORT_INITIALIZE(TASK_ID, "out_power");
    port_out_temperature = PORT_INITIALIZE(TASK_ID, "out_temperature");
    port_out_coefficient = PORT_INITIALIZE(TASK_ID, "out_coefficient");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code

}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    uem_result result;
    FLOAT *power = (FLOAT *)calloc(grid_rows * grid_cols, sizeof(FLOAT));
	FLOAT *temperature = (FLOAT *)calloc(grid_rows * grid_cols, sizeof(FLOAT));

    int nDataRead, nDataWrite;		
    result = UFPort_ReadFromQueue(port_in_power, (unsigned char *) power, grid_rows * grid_cols * sizeof(FLOAT), 0, &nDataRead);
    result = UFPort_ReadFromQueue(port_in_temperature, (unsigned char *) temperature, grid_rows * grid_cols * sizeof(FLOAT), 0, &nDataRead);
	//printf("power[0] at %s : %f\n",TASK_NAME, power[0]);
	//printf("temperature[0] at %s : %f\n",TASK_NAME, temperature[0]);
    
    FLOAT grid_height = chip_height / grid_rows;
    FLOAT grid_width = chip_width / grid_cols;
    FLOAT Cap = FACTOR_CHIP * SPEC_HEAT_SI * t_chip * grid_width * grid_height;
    FLOAT Rx = grid_width / (2.0 * K_SI * t_chip * grid_height);
    FLOAT Ry = grid_height / (2.0 * K_SI * t_chip * grid_width);
    FLOAT Rz = t_chip / (K_SI * grid_height * grid_width);
    
    FLOAT max_slope = MAX_PD / (FACTOR_CHIP * t_chip * SPEC_HEAT_SI);
    FLOAT step = PRECISION / max_slope / 1000.0;
    
    Coefficient coeff;
    coeff.Rx_1 = 1.f / Rx;
    coeff.Ry_1 = 1.f / Ry;
    coeff.Rz_1 = 1.f / Rz;
    coeff.Cap_1 = step / Cap; 
    
   result = UFPort_WriteToQueue(port_out_power, (unsigned char *) power, grid_rows * grid_cols * sizeof(FLOAT), 0, &nDataWrite);
   result = UFPort_WriteToQueue(port_out_temperature, (unsigned char *) temperature, grid_rows * grid_cols * sizeof(FLOAT), 0, &nDataWrite);   
   result = UFPort_WriteToQueue(port_out_coefficient, (unsigned char *) &coeff, sizeof(coeff), 0, &nDataWrite);
   
  //printf("%s send sim_iteration : %d\n",TASK_NAME,iteration);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
