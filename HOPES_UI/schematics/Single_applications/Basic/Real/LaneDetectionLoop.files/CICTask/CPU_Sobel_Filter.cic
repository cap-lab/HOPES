/************************************
 *
 * File : CPU_Sobel_F.cic
 * Date : Mar 21, 2018 2:13 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char* src;
STATIC unsigned char* dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    src = (unsigned char*)malloc(WIDTH * HEIGHT * 3);
    dst = (unsigned char*)malloc(WIDTH * HEIGHT * 3);
}

unsigned char
ComputeSobel(unsigned char ul, // upper left
             unsigned char um, // upper middle
             unsigned char ur, // upper right
             unsigned char ml, // middle left
             unsigned char mm, // middle (unused)
             unsigned char mr, // middle right
             unsigned char ll, // lower left
             unsigned char lm, // lower middle
             unsigned char lr, // lower right
             float fScale )
{
    short Horz = ur + 2*mr + lr - ul - 2*ml - ll;
    short Vert = ul + 2*um + ur - ll - 2*lm - lr;
    short Sum = (short) (fScale*(abs(Horz)+abs(Vert)));
    if ( Sum < 100 ) return 0; else if ( Sum > 0xff ) return 0xff;

    return (unsigned char)Sum;
}

/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int i, j=0;
    // TODO: task main code
    MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3);
   
    for (i=0; i< WIDTH; i++)
    {
        for (j=0; j < HEIGHT; j++) 
        {
			if((j-1>= (HEIGHT/2 + HEIGHT/4) && j+1 < HEIGHT) && (i-1 >= 0 && i+1 < WIDTH)) {
	            unsigned char pix00 = (src[(WIDTH * (j-1) + (i-1)) * 3]);
    	        unsigned char pix01 = (src[(WIDTH * (j-1) + (i+0)) * 3]);
        	    unsigned char pix02 = (src[(WIDTH * (j-1) + (i+1)) * 3]);
            	unsigned char pix10 = (src[(WIDTH * (j+0) + (i-1)) * 3]);
	            unsigned char pix11 = (src[(WIDTH * (j+0) + (i+0)) * 3]);
    	        unsigned char pix12 = (src[(WIDTH * (j+0) + (i+1)) * 3]);
        	    unsigned char pix20 = (src[(WIDTH * (j+1) + (i-1)) * 3]);
            	unsigned char pix21 = (src[(WIDTH * (j+1) + (i+0)) * 3]);
	            unsigned char pix22 = (src[(WIDTH * (j+1) + (i+1)) * 3]);

    	        dst[(WIDTH * j + i)*3 + 0] = ComputeSobel(pix00, pix01, pix02, pix10, pix11, pix12, pix20, pix21, pix22, 1.0f);
        	    dst[(WIDTH * j + i)*3 + 1] = dst[(WIDTH * j + i)*3 + 0];
            	dst[(WIDTH * j + i)*3 + 2] = dst[(WIDTH * j + i)*3 + 0];
			}
			else
			{
	            dst[(WIDTH * j + i)*3 + 0] = 0;
    	        dst[(WIDTH * j + i)*3 + 1] = 0;
        	    dst[(WIDTH * j + i)*3 + 2] = 0;
			}
        }
    }

    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    free(src);
    free(dst);
}

TASK_CODE_END
