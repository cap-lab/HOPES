/************************************
 *
 * File : CPU_KNN_F.cic
 * Date : Mar 21, 2018 11:41 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdlib.h>

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720

#define KNN_WINDOW_RADIUS   3
#define KNN_WINDOW_AREA     ( (2 * KNN_WINDOW_RADIUS + 1) * (2 * KNN_WINDOW_RADIUS + 1) )
#define INV_KNN_WINDOW_AREA ( 1.0f / (float)KNN_WINDOW_AREA )

#define KNN_WEIGHT_THRESHOLD    0.03f
#define KNN_LERP_THRESHOLD      0.79f
// ##DEFINE_SECTION::END

static float knnNoise = 0.64f;
static float    lerpC = 0.2f;


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

static unsigned char *src;
static unsigned char *dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    src    = (unsigned char*)malloc(WIDTH * HEIGHT * 3);
    dst    = (unsigned char*)malloc(WIDTH * 3);
}
    
static float lerpf(float a, float b, float c){
    return a + (b - a) * c;
}
    
static float vecLen(float a[3], float b[3]){
    return (
        (b[0] - a[0]) * (b[0] - a[0]) +
        (b[1] - a[1]) * (b[1] - a[1]) +
        (b[2] - a[2]) * (b[2] - a[2])
    );
}


/////////////////////////////////////
// go code
/////////////////////////////////////
static int prev_iy = -1;

TASK_GO
{
    // TODO: task main code
    int ix, iy = 0;
    float i, j = 0.0;

    UFLoop_GetIteration(THIS_TASK_ID, THIS_THREAD_ID, &iy);

    if(prev_iy >= 0 && prev_iy < iy) {
        MQ_RECEIVE(port_input, (unsigned char*)NULL, WIDTH * HEIGHT * 3); 
    }   
    else{
        MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3); 
    }   
    prev_iy = iy;   

    //MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3);
    //printf("KNN_MQ_RECEIVE_FINISH!\n");
        
    for(ix = 0; ix < WIDTH; ix++)
    {
        //Normalized counter for the weight threshold
        float fCount = 0;
        //Total sum of pixel weights
        float sumWeights = 0;
        //Result accumulator
        float clr[3] = {0, };
        //Center of the KNN window

        float clr00[3] = {src[(WIDTH*iy+ix)*3+0], src[(WIDTH*iy+ix)*3+1], src[(WIDTH*iy+ix)*3+2]};

        //Cycle through KNN window, surrounding (x, y) texel
        for(i = -KNN_WINDOW_RADIUS; i <= KNN_WINDOW_RADIUS; i++)
            for(j = -KNN_WINDOW_RADIUS; j <= KNN_WINDOW_RADIUS; j++)
            {
                float clrIJ[3] = {src[(WIDTH*iy+ix)*3+0], src[(WIDTH*iy+ix)*3+1], src[(WIDTH*iy+ix)*3+2]};

                float distanceIJ = vecLen(clr00, clrIJ);

                //Derive final weight from color distance
                float weightIJ = exp( - (distanceIJ * (1.0f * (knnNoise * knnNoise)) + (i * i + j * j) * INV_KNN_WINDOW_AREA) );
                //Accumulate (x + j, y + i) texel color with computed weight
                clr[0] += clrIJ[0] * weightIJ;
                clr[1] += clrIJ[1] * weightIJ;
                clr[2] += clrIJ[2] * weightIJ;

                //Sum of weights for color normalization to [0..1] range
                sumWeights += weightIJ;

                //Update weight counter, if KNN weight for current window texel
                //exceeds the weight threshold
                fCount += (weightIJ > KNN_WEIGHT_THRESHOLD) ? INV_KNN_WINDOW_AREA : 0;
            }

        //Normalize result color by sum of weights
        sumWeights = 1.0f / sumWeights;
        clr[0] *= sumWeights;
        clr[1] *= sumWeights;
        clr[2] *= sumWeights;

        //Choose LERP quotent basing on how many texels
        //within the KNN window exceeded the weight threshold
        float lerpQ = (fCount > KNN_LERP_THRESHOLD) ? lerpC : 1.0f - lerpC;

        //Write final result to global memory
        clr[0] = lerpf(clr[0], clr00[0], lerpQ);
        clr[1] = lerpf(clr[1], clr00[1], lerpQ);
        clr[2] = lerpf(clr[2], clr00[2], lerpQ);

        dst[ix*3 + 0] = (unsigned char)clr[0];
        dst[ix*3 + 1] = (unsigned char)clr[1];
        dst[ix*3 + 2] = (unsigned char)clr[2];
    }

    AC_SEND(port_output, (unsigned char*) dst, WIDTH * 3, iy);
    //MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
    //printf("KNN_MQ_SEND_FINISH!(%d): %d\n", THIS_THREAD_ID, iy);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    free(src);
    free(dst);
}

TASK_CODE_END

