/************************************
 *
 * File : Delta.cic
 * Date : Jul 24, 2018 11:20 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <stdint.h>

#define OUTPUT_DIMENSION 10 

#define ANSWER_CORRECT 1
#define ANSWER_WRONG 0

#define BATCH 1

static double modelLabel[OUTPUT_DIMENSION * BATCH];
static double realLabel[OUTPUT_DIMENSION * BATCH];
static double delta[OUTPUT_DIMENSION * BATCH];

//static int result[SIZE_OF_TRAIN_EX];
static int result[BATCH];

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_in_input;
STATIC int port_in_label;
STATIC int port_in_chunkindex;
STATIC int port_out_result;
STATIC int port_out_error;
// ##DEFINE_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in_input = PORT_INITIALIZE(TASK_ID, "in_input");
    port_in_label = PORT_INITIALIZE(TASK_ID, "in_label");
    port_in_chunkindex = PORT_INITIALIZE(TASK_ID, "in_chunkindex");
    port_out_result = PORT_INITIALIZE(TASK_ID, "out_result");
    port_out_error = PORT_INITIALIZE(TASK_ID, "out_error");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code

}


/////////////////////////////////////
// go code
/////////////////////////////////////
static int iter = 0;
TASK_GO
{
    // TODO: task main code
    int i, batchNum;
    int real_val = -1;
    int can_val = -1;
    int nChunkindex;
    int nCount;
    
    double candidate; 
    MQ_RECEIVE(port_in_input, (unsigned char*)modelLabel, sizeof(double) * OUTPUT_DIMENSION * BATCH);
    MQ_RECEIVE(port_in_label, (unsigned char*)realLabel, sizeof(double) * OUTPUT_DIMENSION * BATCH);
    MQ_RECEIVE(port_in_chunkindex, (unsigned char*)&nChunkindex, sizeof(int));
    
    //candidate = modelLabel[0];
    //can_val = 0; 
    
    for( batchNum = 0; batchNum < BATCH; batchNum++)
    {
        candidate = modelLabel[batchNum * OUTPUT_DIMENSION + 0];
        can_val = 0;
        
        for( i = 0; i < OUTPUT_DIMENSION; i++)
        {
            if(modelLabel[batchNum * OUTPUT_DIMENSION + i] > candidate)
            {
                candidate = modelLabel[batchNum * OUTPUT_DIMENSION + i];
                can_val = i;
            }
        }
    
        for( i = 0; i < OUTPUT_DIMENSION; i++)
        {
            if(realLabel[batchNum * OUTPUT_DIMENSION + i] == 1)
            {
                real_val = i;
                break;
            }
        }
    
        for (i = 0; i < OUTPUT_DIMENSION; i++) {
            delta[batchNum * OUTPUT_DIMENSION + i] = realLabel[batchNum * OUTPUT_DIMENSION + i] - modelLabel[batchNum * OUTPUT_DIMENSION + i];
        }
	
	   if(real_val == can_val)
            result[batchNum] = ANSWER_CORRECT;
        else
            result[batchNum] = ANSWER_WRONG;
    }
    iter++;
	//printf("iter : %d - delta %d %d \n", iter, real_val, can_val); fflush(stdout);
	if(iter % (1000 / BATCH) == 0){
	    printf("."); fflush(stdout);
	}
    
    MQ_SEND(port_out_error, (unsigned char*)delta, sizeof(double) * OUTPUT_DIMENSION * BATCH);

    AC_SEND(port_out_result, (unsigned char*)result, sizeof(int) * BATCH, nChunkindex);
    
    /*UFLoop_GetIteration(THIS_TASK_ID, THIS_THREAD_ID, &nCount);
    if(iter % (100 / BATCH) == 0){
        printf("(nCount : %d thread : %d)",nCount,THIS_THREAD_ID);
    }   
    if(iter % (1000 / BATCH) == 0){ 
        printf("\n");
    }*/  

    //MQ_SEND(port_out_result, (unsigned char*)&result, sizeof(int));
    //if(iter == SIZE_OF_TRAIN_EX){
    //    MQ_SEND(port_out_result, (unsigned char*)result, sizeof(int)*SIZE_OF_TRAIN_EX);
    //    iter = 0;
    //}
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END