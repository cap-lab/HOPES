/************************************
 *
 * File : last_pool.cic
 * Date : Oct 30, 2018 2:52 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "blas.h"
#include "cuda.h"

// ##DEFINE_SECTION::START
#define BATCH 10

#define IN_WIDTH        7
#define IN_HEIGHT       7
#define IN_CHANNEL      1000

#define OUT_WIDTH       1
#define OUT_HEIGHT      1
#define OUT_CHANNEL     1000

#define KERNEL_WIDTH    7
#define KERNEL_HEIGHT   7
#define STRIDE          7
#define PADDING_WIDTH   0
#define PADDING_HEIGHT  0

#define PRINTopt 0
// ##DEFINE_SECTION::END

static float *pfData;

static float *pfPrevDataGPU;
static float *pfDataGPU;

static cudnnTensorDescriptor_t srcTensorDesc;
static cudnnTensorDescriptor_t dstTensorDesc;
static cudnnPoolingDescriptor_t poolDesc;

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////
static void cudnn_pool_setup() {
    cudnnSetTensor4dDescriptor(srcTensorDesc, CUDNN_TENSOR_NCHW,
                               CUDNN_DATA_FLOAT, BATCH, IN_CHANNEL, IN_HEIGHT,
                               IN_WIDTH);
    cudnnSetTensor4dDescriptor(dstTensorDesc, CUDNN_TENSOR_NCHW,
                               CUDNN_DATA_FLOAT, BATCH, OUT_CHANNEL, OUT_HEIGHT,
                               OUT_WIDTH);
    int pool_type = CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;
    cudnnSetPooling2dDescriptor(poolDesc, (cudnnPoolingMode_t)pool_type, CUDNN_NOT_PROPAGATE_NAN,
                                KERNEL_HEIGHT, KERNEL_WIDTH, PADDING_HEIGHT, PADDING_WIDTH,
                                STRIDE, STRIDE);
}

TASK_INIT
{
// ##INIT_PORT_SECTION::START
port_input = PORT_INITIALIZE(TASK_ID, "input");
port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    int nInSize = IN_WIDTH * IN_HEIGHT * IN_CHANNEL;
    int nOutSize = OUT_WIDTH * OUT_HEIGHT * OUT_CHANNEL;

    cudaStream_t stream;
    cudnnGetStream(cudnn_handle(), &stream);

    pfData = (float *)calloc((BATCH * nOutSize), sizeof(float));
    pfPrevDataGPU = cuda_make_array((float *)NULL, BATCH * nInSize);
    pfDataGPU = cuda_make_array((float *)NULL, BATCH * nOutSize);
    
    cudnnCreateTensorDescriptor(&srcTensorDesc);
    cudnnCreateTensorDescriptor(&dstTensorDesc);
    cudnnCreatePoolingDescriptor(&poolDesc);
    cudnn_pool_setup();
}


/////////////////////////////////////
// go code
/////////////////////////////////////

static int iter = 0;
const float one = 1;
const float zero = 0;
TASK_GO
{
    // TODO: task main code
    int nInSize = IN_WIDTH * IN_HEIGHT * IN_CHANNEL;
    int nOutSize = OUT_WIDTH * OUT_HEIGHT * OUT_CHANNEL;
    
    MQ_RECEIVE(port_input, (unsigned char*)pfPrevDataGPU, sizeof(float) * nInSize * BATCH);

    cudnnPoolingForward(cudnn_handle(), poolDesc, &one, srcTensorDesc,
                        pfPrevDataGPU, &zero, dstTensorDesc, pfDataGPU);

    MQ_SEND(port_output, (unsigned char*)pfDataGPU, sizeof(float) * nOutSize * BATCH);
	if(PRINTopt == 1)
		printf("#####last_pool) send finish\n");
	iter++;
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(pfPrevDataGPU);
    cudaFree(pfDataGPU);
}

TASK_CODE_END
