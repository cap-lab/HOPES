/************************************
 *
 * File : PrePro.cic
 * Date : Jul 24, 2018 11:02 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <stdint.h>

#define IMG_HEIGHT 28
#define IMG_WIDTH 28
#define INPUT_DIMENSION 784
#define OUTPUT_DIMENSION 10

#define BATCH 100

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_in_image;
STATIC int port_in_label;
STATIC int port_out1_image;
STATIC int port_out_r_label;
STATIC int port_out2_image;
STATIC int port_out_chunkindex;
// ##DEFINE_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in_image = PORT_INITIALIZE(TASK_ID, "in_image");
    port_in_label = PORT_INITIALIZE(TASK_ID, "in_label");
    port_out1_image = PORT_INITIALIZE(TASK_ID, "out1_image");
    port_out_r_label = PORT_INITIALIZE(TASK_ID, "out_r_label");
    port_out2_image = PORT_INITIALIZE(TASK_ID, "out2_image");
    port_out_chunkindex = PORT_INITIALIZE(TASK_ID, "out_chunkindex");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code

}


/////////////////////////////////////
// go code
/////////////////////////////////////
static char train_Image[INPUT_DIMENSION * BATCH];
static char train_Label[1 * BATCH];

static double modelFromImg[INPUT_DIMENSION * BATCH];
static double modelFromLabel[OUTPUT_DIMENSION * BATCH];

static int iter = 0; 
TASK_GO
{
    // TODO: task main code
    iter++;
    int i;
    int modelFromLabelValue;
    int nChunkindex;
    
    nChunkindex = AC_CHECK(port_in_image);
    
    AC_RECEIVE(port_in_image, (unsigned char*)&train_Image, sizeof(train_Image), nChunkindex);
    AC_RECEIVE(port_in_label, (unsigned char*)&train_Label, sizeof(train_Label), nChunkindex);
    
    //MQ_RECEIVE(port_in_hello, (unsigned char*)&tmp, sizeof(double));
    /*if(preprocess_index == 0){
        MQ_RECEIVE(port_in, (unsigned char*)&givenSet, sizeof(givenSet));
    }*/   
    
    //MQ_RECEIVE(port_in1, (unsigned char*)&train_Image, sizeof(train_Image));
    //MQ_RECEIVE(port_in2, (unsigned char*)&train_Label, sizeof(train_Label));
    
    for(i = 0; i < INPUT_DIMENSION * BATCH; i++)
	{
		//modelFromImg[i] = ((double)(givenSet.trainImage[preprocess_index][i] & 0xFF))/255.0;
		modelFromImg[i] = ((double)(train_Image[i] & 0xFF))/255.0;					
	}
	for(i = 0; i < OUTPUT_DIMENSION * BATCH; i++)
	{
		modelFromLabel[i] = 0;					
	}
	//modelFromLabelValue = (int)givenSet.trainLabel[preprocess_index][0] & 0xFF;
	for(i = 0; i < BATCH; i++){
        modelFromLabelValue = (int)train_Label[i] & 0xFF;
        modelFromLabel[i * OUTPUT_DIMENSION + modelFromLabelValue] = 1;
	}
          
    //printf("%d\n", modelFromLabelValue); fflush(stdout);
    //printf("pre: %lu\n", sizeof(modelFromImg)); fflush(stdout);
    MQ_SEND(port_out1_image, (unsigned char*)modelFromImg, sizeof(modelFromImg));
    MQ_SEND(port_out2_image, (unsigned char*)modelFromImg, sizeof(modelFromImg));
    MQ_SEND(port_out_r_label, (unsigned char*)modelFromLabel, sizeof(modelFromLabel));
    MQ_SEND(port_out_chunkindex, (unsigned char*)&nChunkindex, sizeof(int));
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
