/************************************
 *
 * File : end_short.cic
 * Date : Oct 30, 2018 3:27 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>
#include <time.h>

#include "activate.h"
#include "blas.h"
#include "cuda.h"

// ##DEFINE_SECTION::START
#define BATCH 1

#define EXECUTION_COUNT 36

#define PRINTopt 0
// ##DEFINE_SECTION::END
static int IN_WIDTH = 14;
static int IN_HEIGHT = 14;
static int IN_CHANNEL = 1024;

static int OUT_WIDTH = 14;
static int OUT_HEIGHT = 14;
static int OUT_CHANNEL = 1024;

static float *pfShortCutDataGPU;
static float *pfDataGPU;

static float *pfData;
static float *pfPrevData;

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input_shortcut;
STATIC int port_input;
STATIC int port_output;
STATIC int port_output2;
// ##DEFINE_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////

static cudaStream_t stream;

TASK_INIT
{
    if(PRINTopt == 1)
        printf("333thirdblock_end_shortcut) init start\n");
// ##INIT_PORT_SECTION::START

    port_input_shortcut = PORT_INITIALIZE(TASK_ID, "input_shortcut");
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
    port_output2 = PORT_INITIALIZE(TASK_ID, "output2");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    int nInSize = 28 * 28 * 512;
    int nOutSize = OUT_WIDTH * OUT_HEIGHT * OUT_CHANNEL;
    
	//cudaSetDevice(1);

    cudnnGetStream(cudnn_handle(), &stream);

	pfShortCutDataGPU = cuda_make_array((float *)NULL, BATCH * nInSize);
    pfDataGPU = cuda_make_array((float *)NULL, BATCH * nOutSize);
    if(PRINTopt == 1)
        printf("333thirdblock_end_shortcut) init finish\n");
}


/////////////////////////////////////
// go code
/////////////////////////////////////

static int iter = 0;
static int layer_idx = 0;
TASK_GO
{
    if(PRINTopt == 1)
        printf("333thirdblock_end_shortcut) iter : %d start\n",iter);
    // TODO: task main code
    int nInSize, nOutSize, nMaxInSize;
    int idx;
    iter++; idx = iter;//change to loop API
   
    if(iter % EXECUTION_COUNT == 1){
		IN_WIDTH = 28; IN_HEIGHT = 28; IN_CHANNEL = 512;
    }
    else{
		IN_WIDTH = 14; IN_HEIGHT = 14; IN_CHANNEL = 1024;
    }
	nMaxInSize = 28 * 28 * 512;
    nInSize = IN_WIDTH * IN_HEIGHT * IN_CHANNEL;
    nOutSize = OUT_WIDTH * OUT_HEIGHT * OUT_CHANNEL;

    MQ_RECEIVE(port_input_shortcut, (unsigned char*)pfShortCutDataGPU, sizeof(float) * nMaxInSize * BATCH);
    MQ_RECEIVE(port_input, (unsigned char*)pfDataGPU, sizeof(float) * nOutSize * BATCH);

    if(PRINTopt == 1)
        printf("333thirdblock_end_shortcut) iter : %d receive finish\n",iter - 1);

    shortcut_gpu(BATCH, IN_WIDTH, IN_HEIGHT, IN_CHANNEL, pfShortCutDataGPU, OUT_WIDTH, OUT_HEIGHT, OUT_CHANNEL, pfDataGPU);
    
    leaky_relu_gpu(pfDataGPU, nOutSize * BATCH);  
    
    if(iter % EXECUTION_COUNT == 0){
        MQ_SEND(port_output2, (unsigned char*)pfDataGPU, sizeof(float) * nOutSize * BATCH);
		if(PRINTopt > 0){
			printf("33333333333333333333333333333333333333333333333333\n");
			printf("333 thirdblock_end_shortcut) iter : %d finish\n",iter - 1);
			printf("333 thirdblock_end_shortcut) loop iter : %d finish\n",iter / EXECUTION_COUNT);
			printf("33333333333333333333333333333333333333333333333333\n");
		}
    }
    else{
        MQ_SEND(port_output, (unsigned char*)pfDataGPU, sizeof(float) * nOutSize * BATCH);
    }
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(pfShortCutDataGPU);
    cudaFree(pfDataGPU);
}

TASK_CODE_END
