/************************************
 *
 * File : GPU_Gauss.cic
 * Date : Mar 21, 2018 2:12 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char* src;
STATIC unsigned char* dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    cudaMalloc((void **) &src, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &dst, WIDTH*HEIGHT*3);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

__global__ void Gaussian(unsigned char *src, unsigned char *dst, int imageW, int imageH, float a)
{
    int j = 0;

    unsigned int i = blockIdx.x*blockDim.x + threadIdx.x;

    float yp[3] = {src[i*3 + 0], src[i*3 + 1], src[i*3 + 2]};

    for (j = 0; j < imageH; ++j) {
        float xc[3] = {src[(imageW * j + i)*3 + 0], src[(imageW * j + i)*3 + 1], src[(imageW * j + i)*3 + 2]};

        float yc[3] = {0, };
        yc[0] = xc[0] + a*(yp[0] - xc[0]);
        yc[1] = xc[1] + a*(yp[1] - xc[1]);
        yc[2] = xc[2] + a*(yp[2] - xc[2]);

        dst[(imageW*j + i)*3 + 0] = yc[0];
        dst[(imageW*j + i)*3 + 1] = yc[1];
        dst[(imageW*j + i)*3 + 2] = yc[2];

        yp[0] = yc[0];
        yp[1] = yc[1];
        yp[2] = yc[2];
    }

    yp[0] = src[(imageW*(imageH-1) + i)*3 + 0];
    yp[1] = src[(imageW*(imageH-1) + i)*3 + 1];
    yp[2] = src[(imageW*(imageH-1) + i)*3 + 2];

    __syncthreads();

    for (j = (imageH-1); j >= 0; j--) {
        float xc[3] = {src[(imageW*j + i)*3 + 0], src[(imageW*j + i)*3 + 1], src[(imageW*j + i)*3 + 2]};

        float yc[3] = {0, };
        yc[0] = xc[0] + a*(yp[0] - xc[0]);
        yc[1] = xc[1] + a*(yp[1] - xc[1]);
        yc[2] = xc[2] + a*(yp[2] - xc[2]);

        float ot[3] = {dst[(imageW*j + i)*3 + 0], dst[(imageW*j + i)*3 + 1], dst[(imageW*j + i)*3 + 2]};
        ot[0] = (ot[0] + yc[0]) * 0.5f;
        ot[1] = (ot[1] + yc[1]) * 0.5f;
        ot[2] = (ot[2] + yc[2]) * 0.5f;

        dst[(imageW*j + i)*3 + 0] = ot[0];
        dst[(imageW*j + i)*3 + 1] = ot[1];
        dst[(imageW*j + i)*3 + 2] = ot[2];

        yp[0] = yc[0];
        yp[1] = yc[1];
        yp[2] = yc[2];
    }
}

TASK_GO
{

    // TODO: task main code
    MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3);

    KERNEL_CALL(Gaussian, src, dst, WIDTH, HEIGHT, 0.7f);
    
    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(src);
    cudaFree(dst);
}

TASK_CODE_END
