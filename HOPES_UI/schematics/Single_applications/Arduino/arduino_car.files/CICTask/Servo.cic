/************************************
 *
 * File : Servo.cic
 * Date : Sep 10, 2018 7:07 PM
 *
*************************************/

#include <Arduino.h>

#include <Servo.h>

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

enum Direction {
    DIRECTION_LEFT,
    DIRECTION_RIGHT,
    DIRECTION_STRAIGHT,
    DIRECTION_LEFT_45,
    DIRECTION_RIGHT_45,
};

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_direction;
// ##DEFINE_PORT_SECTION::END

static Servo myServo;
static int servo_angle;
static int S_pin = 10;
static int isInit = 0; 
static int nChannelSize = 0;

#define NECK_TURN_TIME 100

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_direction = PORT_INITIALIZE(TASK_ID, "direction");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    if(isInit == 0) {
        myServo.attach(S_pin);
        servo_angle = 80;
        myServo.write(servo_angle);
        delay(NECK_TURN_TIME*10);
        
        isInit = 1;

        nChannelSize = UFPort_GetChannelSize(port_direction);
    }
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int direction;
    enum Direction enDirection;
    int nDataSize;
    uem_result result;
    
    result = UFPort_GetNumOfAvailableData(port_direction, 0, &nDataSize);
    if(result != ERR_UEM_NOERROR) return;
    if(nDataSize + (int) sizeof(enum Direction) > nChannelSize) return;
     
    direction = SYS_REQ(GET_PARAM_INT, (char *) "Servo", (char *) "direction");
    
    switch(direction) 
    {
    case 0:
        enDirection = DIRECTION_LEFT;
        servo_angle = 160;
        break;
    case 1:
        enDirection = DIRECTION_RIGHT;
        servo_angle = 0;
        break;
    case 2:
        enDirection = DIRECTION_STRAIGHT;
        servo_angle = 80;
        break;
    case 3:
        enDirection = DIRECTION_LEFT_45;
        servo_angle = 120;
        break;
    case 4:
        enDirection = DIRECTION_RIGHT_45;
        servo_angle = 40;
        break;
    }
    
    myServo.write(servo_angle);
    delay(NECK_TURN_TIME);

    MQ_SEND(port_direction, (unsigned char *)&enDirection, sizeof(enum Direction));
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
