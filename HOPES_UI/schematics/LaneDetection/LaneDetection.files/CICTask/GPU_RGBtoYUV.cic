/************************************
 *
 * File : GPU_RGBtoYUV.cic
 * Date : Mar 22, 2018 11:06 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720

#define CLIPING(data)  ( (data) < 0 ? 0 : ( (data) > 255 ) ? 255 : ( data ) )
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char* src;
STATIC unsigned char* dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{

// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    
    cudaMalloc((void **) &src, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &dst, WIDTH*HEIGHT*1.5);
}


/////////////////////////////////////
// go code
/////////////////////////////////////


__global__ void RGBtoYUV(unsigned char *src, unsigned char *dst, int imageW, int imageH)
{
    const int ix = blockDim.x * blockIdx.x + threadIdx.x;
    const int iy = blockDim.y * blockIdx.y + threadIdx.y;

    unsigned char R = src[(imageW * iy + ix) * 3 + 0];
    unsigned char G = src[(imageW * iy + ix) * 3 + 1];
    unsigned char B = src[(imageW * iy + ix) * 3 + 2];

    dst[imageW * iy + ix] = CLIPING((0.257 * R) + (0.504 * G) + (0.098 * B) + 16);                                                // Y
    dst[imageW * imageH + ((imageW/2) * (iy/2) + (ix/2))] = CLIPING(-(0.148 * R) - (0.291 * G) + (0.439 * B) + 128);                        // U
    dst[imageW * imageH + (imageW * imageH)/4 + ((imageW/2) * (iy/2) + (ix/2))] =  CLIPING((0.439 * R) - (0.368 * G) - (0.071 * B) + 128);  // V

}

TASK_GO
{
    // TODO: task main code
    int ix, iy = 0;
    // TODO: task main code
    MQ_RECEIVE(port_input,(unsigned char*)src , WIDTH * HEIGHT * 3);
    //printf("RGBtoYUV_MQ_RECEIVE_FINISH!\n");
    
    KERNEL_CALL(RGBtoYUV, src, dst, WIDTH, HEIGHT);

    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 1.5);
    //printf("RGBtoYUV_MQ_SEND_FINISH!\n");
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(src);
    cudaFree(dst);
}

TASK_CODE_END
