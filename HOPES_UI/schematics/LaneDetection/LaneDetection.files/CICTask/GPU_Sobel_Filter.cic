/************************************
 *
 * File : CPU_Sobel_F.cic
 * Date : Mar 21, 2018 2:13 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char* src;
STATIC unsigned char* dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    cudaMalloc((void **) &src, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &dst, WIDTH*HEIGHT*3);
}

/////////////////////////////////////
// go code
/////////////////////////////////////

__device__ unsigned char
ComputeSobel(unsigned char ul, // upper left
             unsigned char um, // upper middle
             unsigned char ur, // upper right
             unsigned char ml, // middle left
             unsigned char mm, // middle (unused)
             unsigned char mr, // middle right
             unsigned char ll, // lower left
             unsigned char lm, // lower middle
             unsigned char lr, // lower right
             float fScale )
{
    short Horz = ur + 2*mr + lr - ul - 2*ml - ll;
    short Vert = ul + 2*um + ur - ll - 2*lm - lr;
    short Sum = (short) (fScale*(fabsf(Horz)+fabsf(Vert)));
    if ( Sum < 100 ) return 0; else if ( Sum > 0xff ) return 0xff;

    return (unsigned char)Sum;
}

__global__ void Sobel(unsigned char *src, unsigned char *dst, unsigned int Pitch, int imageW, int imageH, float fScale)
{
    const int ix = blockDim.x * blockIdx.x + threadIdx.x;
    const int iy = blockDim.y * blockIdx.y + threadIdx.y;

    if((iy-1 >= (HEIGHT/2 + HEIGHT/4) &&  iy+1 < HEIGHT) && (ix-1 >=0 && ix+1 <WIDTH)){
        unsigned char pix00 = (src[(imageW * (iy-1) + (ix-1)) * 3]);
        unsigned char pix01 = (src[(imageW * (iy-1) + (ix)) * 3]);
        unsigned char pix02 = (src[(imageW * (iy-1) + (ix+1)) * 3]);
        unsigned char pix10 = (src[(imageW * (iy) + (ix-1)) * 3]);
        unsigned char pix11 = (src[(imageW * (iy) + (ix)) * 3]);
        unsigned char pix12 = (src[(imageW * (iy) + (ix+1)) * 3]);
        unsigned char pix20 = (src[(imageW * (iy+1) + (ix-1)) * 3]);
        unsigned char pix21 = (src[(imageW * (iy+1) + (ix)) * 3]);
        unsigned char pix22 = (src[(imageW * (iy+1) + (ix+1)) * 3]);

        dst[(iy * imageW + ix) * 3] = ComputeSobel(pix00, pix01, pix02, pix10, pix11, pix12, pix20, pix21, pix22, fScale);
        dst[(iy * imageW + ix) * 3 + 1] =  dst[(iy * imageW + ix) * 3];
        dst[(iy * imageW + ix) * 3 + 2] =  dst[(iy * imageW + ix) * 3];
    }
    else {
        dst[(iy * imageW + ix) * 3 + 0] = 0;
        dst[(iy * imageW + ix) * 3 + 1] = 0;
        dst[(iy * imageW + ix) * 3 + 2] = 0;
    }
}

TASK_GO
{
    int i, j=0;
    // TODO: task main code
    MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3);
   
    KERNEL_CALL(Sobel, src, dst, WIDTH, WIDTH, HEIGHT, 1.0f);

    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(src);
    cudaFree(dst);
}

TASK_CODE_END
