/************************************
 *
 * File : CPU_YUVtoRGB.cic
 * Date : Mar 20, 2018 7:58 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720

#define CLIPING(data)  ( (data) < 0 ? 0 : ( (data) > 255 ) ? 255 : ( data ) )
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char* src;
STATIC unsigned char* dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{

// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    cudaMalloc((void **) &src, WIDTH*HEIGHT*1.5);
    cudaMalloc((void **) &dst, WIDTH*HEIGHT*3);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

__global__ static void YUVtoRGB(unsigned char *src, unsigned char *dst, int imageW, int imageH)
{
    const int ix = blockDim.x * blockIdx.x + threadIdx.x;
    const int iy = blockDim.y * blockIdx.y + threadIdx.y;

    unsigned char Y = src[imageW * iy + ix];
    unsigned char U = src[imageW * imageH + ( (imageW/2) * (iy/2) + ix/2)];
    unsigned char V = src[imageW * imageH + ( (imageW * imageH)/4 + (imageW/2) * (iy/2) + ix/2)];

    dst[(imageW * iy + ix)*3 + 0] = CLIPING((1.164*(Y-16) + 1.596*(V-128)));                 // R
    dst[(imageW * iy + ix)*3 + 1] = CLIPING((1.164*(Y-16) - 0.813*(V-128) - 0.391*(U-128))); // G
    dst[(imageW * iy + ix)*3 + 2] = CLIPING((1.164*(Y-16) + 2.018*(U-128)));                 // B

}

TASK_GO
{
    // TODO: task main code
    int ix, iy = 0;
    // TODO: task main code
    MQ_RECEIVE(port_input,(unsigned char*)src , WIDTH * HEIGHT * 1.5);
    //printf("YUVtoRGB_MQ_RECEIVE_FINISH!\n");
      
    KERNEL_CALL(YUVtoRGB, src, dst, WIDTH, HEIGHT);

    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
    //printf("YUVtoRGB_MQ_SEND_FINISH!\n");
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(src);
    cudaFree(dst);
}

TASK_CODE_END
