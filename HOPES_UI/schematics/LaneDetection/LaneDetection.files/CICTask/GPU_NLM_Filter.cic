/************************************
 *
 * File : GPU_NLM_F.cic
 * Date : Mar 21, 2018 12:28 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720

#define BLOCKDIM_X   8
#define BLOCKDIM_Y   8
#define NLM_WINDOW_RADIUS   3
#define NLM_BLOCK_RADIUS    3
#define NLM_WINDOW_AREA     ( (2 * NLM_WINDOW_RADIUS + 1) * (2 * NLM_WINDOW_RADIUS + 1) )
#define INV_NLM_WINDOW_AREA ( 1.0f / (float)NLM_WINDOW_AREA )

#define NLM_WEIGHT_THRESHOLD    0.10f
#define NLM_LERP_THRESHOLD      0.10f
// ##DEFINE_SECTION::END

static float nlmNoise = 1.45f;
static float    lerpC = 0.2f;


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char *src;
STATIC unsigned char *dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT

{
    // ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
    // ##INIT_PORT_SECTION::END

    // TODO: task initialize code
         
    cudaMalloc((void **) &src, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &dst, WIDTH*HEIGHT*3);
}


/////////////////////////////////////
// go code
/////////////////////////////////////



__device__ __host__ static float lerpf(float a, float b, float c){
    return a + (b - a) * c;
}

__device__ __host__ static float vecLen(float a[3], float b[3]){
    return (
        (b[0] - a[0]) * (b[0] - a[0]) +
        (b[1] - a[1]) * (b[1] - a[1]) +
        (b[2] - a[2]) * (b[2] - a[2])
    );
}


__global__ void NLM(unsigned char *src, unsigned char *dst, int imageW, int imageH, float Noise, float lerpC)
{
    //Weights cache
    __shared__ float fWeights[BLOCKDIM_X * BLOCKDIM_Y];

    const int   ix = blockDim.x * blockIdx.x + threadIdx.x;
    const int   iy = blockDim.y * blockIdx.y + threadIdx.y;
    //Add half of a texel to always address exact texel centers
    const int cx = blockDim.x * blockIdx.x + NLM_WINDOW_RADIUS;
    const int cy = blockDim.x * blockIdx.y + NLM_WINDOW_RADIUS;

    if(ix < imageW && iy < imageH){
        //Find color distance from current texel to the center of NLM window
        float weight = 0;
        for(float n = -NLM_BLOCK_RADIUS; n <= NLM_BLOCK_RADIUS; n++)
            for(float m = -NLM_BLOCK_RADIUS; m <= NLM_BLOCK_RADIUS; m++){
                float in = n, im = m;

                if(cy + in < 0 || cy + in >= HEIGHT)  in = -n;
                if(cx + im < 0 || cx + im >= WIDTH)   im = -m; 
                float clr00_1[3] = {src[(imageW * (cy + (int)in) + (cx + (int)im))*3+0], src[(imageW * (cy + (int)in) + (cx + (int)im))*3+1], src[(imageW * (cy + (int)in) + (cx + (int)im))*3+2]};

                if(iy + in < 0 || iy + in >= HEIGHT)  in = -n;
                if(ix + im < 0 || ix + im >= WIDTH)  im = -m; 
                float clr00_2[3] = {src[(imageW * (iy + (int)in) + (ix + (int)im))*3+0], src[(imageW * (iy + (int)in) + (ix + (int)im))*3+1], src[(imageW * (iy + (int)in) + (ix + (int)im))*3+2]};
                weight += vecLen(clr00_1, clr00_2);
            }

        //Geometric distance from current texel to the center of NLM window
        float dist =
            (threadIdx.x - NLM_WINDOW_RADIUS) * (threadIdx.x - NLM_WINDOW_RADIUS) +
            (threadIdx.y - NLM_WINDOW_RADIUS) * (threadIdx.y - NLM_WINDOW_RADIUS);

        //Derive final weight from color and geometric distance
        weight = __expf( -(weight * Noise + dist * INV_NLM_WINDOW_AREA) );

        //Write the result to shared memory
        fWeights[threadIdx.y * BLOCKDIM_X + threadIdx.x] = weight;
        //Wait until all the weights are ready
        __syncthreads();

        //Normalized counter for the NLM weight threshold
        float fCount = 0;
        //Total sum of pixel weights
        float sumWeights = 0;
        //Result accumulator
        float clr[3] = {0, };

        int idx = 0;

        //Cycle through NLM window, surrounding (x, y) texel
        for(float i = -NLM_WINDOW_RADIUS; i <= NLM_WINDOW_RADIUS + 1; i++)
            for(float j = -NLM_WINDOW_RADIUS; j <= NLM_WINDOW_RADIUS + 1; j++)
            {
                float ii = i, ij = j;
                if(iy + ii < 0 || iy + ii >= HEIGHT)  ii = -i;
                if(ix + ij < 0 || ix + ij >= WIDTH)   ij = -j; 

                //Load precomputed weight
                float weightIJ = fWeights[idx++];

                //Accumulate (x + j, y + i) texel color with computed weight
                float clrIJ[3] = {src[(imageW * (iy + (int)ii) + (ix + (int)ij))*3+0], src[(imageW * (iy + (int)ii) + (ix + (int)ij))*3+1], src[(imageW * (iy + (int)ii) + (ix + (int)ij))*3+2]};

                clr[0]       += clrIJ[0] * weightIJ;
                clr[1]       += clrIJ[1] * weightIJ;
                clr[2]       += clrIJ[2] * weightIJ;

                //Sum of weights for color normalization to [0..1] range
                sumWeights  += weightIJ;

                //Update weight counter, if NLM weight for current window texel
                //exceeds the weight threshold
                fCount      += (weightIJ > NLM_WEIGHT_THRESHOLD) ? INV_NLM_WINDOW_AREA : 0;
            }

        //Normalize result color by sum of weights
        sumWeights = 1.0f / sumWeights;
        clr[0] *= sumWeights;
        clr[1] *= sumWeights;
        clr[2] *= sumWeights;

        //Choose LERP quotent basing on how many texels
        //within the NLM window exceeded the weight threshold
        float lerpQ = (fCount > NLM_LERP_THRESHOLD) ? lerpC : 1.0f - lerpC;

        //Write final result to global memory
        float clr00[3] = {src[(imageW * iy + ix)*3+0], src[(imageW * iy + ix)*3+1], src[(imageW * iy + ix)*3+2]};

        clr[0] = lerpf(clr[0], clr00[0], lerpQ);
        clr[1] = lerpf(clr[1], clr00[1], lerpQ);
        clr[2] = lerpf(clr[2], clr00[2], lerpQ);

        dst[(imageW * iy + ix)*3 + 0] = (unsigned char)clr[0];
        dst[(imageW * iy + ix)*3 + 1] = (unsigned char)clr[1];
        dst[(imageW * iy + ix)*3 + 2] = (unsigned char)clr[2];
    }
}

TASK_GO
{
    // TODO: task main code
    MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3);
    //printf("NLM_MQ_RECEIVE_FINISH!\n");
      
    KERNEL_CALL(NLM, src, dst, WIDTH, HEIGHT, 1.0f / (nlmNoise * nlmNoise), lerpC);

    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
    //printf("NLM_MQ_SEND_FINISH!\n");
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
     cudaFree(src);
     cudaFree(dst);
}

TASK_CODE_END
