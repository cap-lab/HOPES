/************************************
 *
 * File : En.cic
 * Date : Sep 25, 2012 5:03 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END
//STATIC int port_out;

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int samplingRate = 5;
STATIC int codingType = 3;
STATIC FILE                    *fd_in;
STATIC FILE                    *fd_out;
STATIC struct g72x_state       state;
STATIC unsigned char           sample_char;
STATIC short                   sample_short;
STATIC unsigned char           code;
STATIC int                     resid;
STATIC int                     in_coding;
STATIC int                     in_size;
STATIC unsigned                *in_buf;
STATIC int                     (*enc_routine)(int, int, struct g72x_state *);
STATIC int                     enc_bits;


// ##DEFINE_PORT_SECTION::END
#define	AUDIO_ENCODING_ULAW	(1)	/* ISDN u-law */
#define	AUDIO_ENCODING_ALAW	(2)	/* ISDN A-law */
#define	AUDIO_ENCODING_LINEAR	(3)	/* PCM 2's-complement (0-center) */

/*
 * The following is the definition of the state structure
 * used by the G.721/G.723 encoder and decoder to preserve their internal
 * state between successive calls.  The meanings of the majority
 * of the state structure fields are explained in detail in the
 * CCITT Recommendation G.721.  The field names are essentially indentical
 * to variable names in the bit level description of the coding algorithm
 * included in this Recommendation.
 */
struct g72x_state {
    long yl;	/* Locked or steady state step size multiplier. */
    short yu;	/* Unlocked or non-steady state step size multiplier. */
    short dms;	/* Short term energy estimate. */
    short dml;	/* Long term energy estimate. */
    short ap;	/* Linear weighting coefficient of 'yl' and 'yu'. */

    short a[2];	/* Coefficients of pole portion of prediction filter. */
    short b[6];	/* Coefficients of zero portion of prediction filter. */
    short pk[2];	/*
                     * Signs of previous two samples of a partially
                     * reconstructed signal.
                     */
    short dq[6];	/*
                     * Previous 6 samples of the quantized difference
                     * signal represented in an internal floating point
                     * format.
                     */
    short sr[2];	/*
                     * Previous 2 samples of the quantized difference
                     * signal represented in an internal floating point
                     * format.
                     */
    char td;	/* delayed tone detect, new in 1988 version */
};


#define	SIGN_BIT	(0x80)		/* Sign bit for a A-law byte. */
#define	QUANT_MASK	(0xf)		/* Quantization field mask. */
#define	NSEGS		(8)		/* Number of A-law segments. */
#define	SEG_SHIFT	(4)		/* Left shift for segment number. */
#define	SEG_MASK	(0x70)		/* Segment field mask. */
#define	BIAS		(0x84)		/* Bias for linear code. */

/*
 * alaw2linear() - Convert an A-law value to 16-bit linear PCM
 *
 */
static int
alaw2linear(
        unsigned char	a_val)
{
    int		t;
    int		seg;

    a_val ^= 0x55;

    t = (a_val & QUANT_MASK) << 4;
    seg = ((unsigned)a_val & SEG_MASK) >> SEG_SHIFT;
    switch (seg) {
        case 0:
            t += 8;
            break;
        case 1:
            t += 0x108;
            break;
        default:
            t += 0x108;
            t <<= seg - 1;
    }
    return ((a_val & SIGN_BIT) ? t : -t);
}

/*
 * ulaw2linear() - Convert a u-law value to 16-bit linear PCM
 *
 * First, a biased linear code is derived from the code word. An unbiased
 * output can then be obtained by subtracting 33 from the biased code.
 *
 * Note that this function expects to be passed the complement of the
 * original code word. This is in keeping with ISDN conventions.
 */
static int
ulaw2linear(
        unsigned char	u_val)
{
    int		t;

    /* Complement to obtain normal u-law value. */
    u_val = ~u_val;

    /*
     * Extract and bias the quantization bits. Then
     * shift up by the segment number and subtract out the bias.
     */
    t = ((u_val & QUANT_MASK) << 3) + BIAS;
    t <<= ((unsigned)u_val & SEG_MASK) >> SEG_SHIFT;

    return ((u_val & SIGN_BIT) ? (BIAS - t) : (t - BIAS));
}


static short power2[15] = {1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80,
    0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000};
/*
 * quan()
 *
 * quantizes the input val against the table of size short integers.
 * It returns i if table[i - 1] <= val < table[i].
 *
 * Using linear search for simple coding.
 */
static int
quan(
        int		val,
        short		*table,
        int		size)
{
    int		i;

    for (i = 0; i < size; i++)
        if (val < *table++)
            break;
    return (i);
}

/*
 * fmult()
 *
 * returns the integer product of the 14-bit integer "an" and
 * "floating point" representation (4-bit exponent, 6-bit mantessa) "srn".
 */
static int
fmult(
        int		an,
        int		srn)
{
    short		anmag, anexp, anmant;
    //short		wanexp, wanmag, wanmant;
    short		wanexp, wanmant;
    short		retval;

    anmag = (an > 0) ? an : ((-an) & 0x1FFF);
    anexp = quan(anmag, power2, 15) - 6;
    anmant = (anmag == 0) ? 32 :
        (anexp >= 0) ? anmag >> anexp : anmag << -anexp;
    wanexp = anexp + ((srn >> 6) & 0xF) - 13;

    wanmant = (anmant * (srn & 077) + 0x30) >> 4;
    retval = (wanexp >= 0) ? ((wanmant << wanexp) & 0x7FFF) :
        (wanmant >> -wanexp);

    return (((an ^ srn) < 0) ? -retval : retval);
}

/*
 * g72x_init_state()
 *
 * This routine initializes and/or resets the g72x_state structure
 * pointed to by 'state_ptr'.
 * All the initial state values are specified in the CCITT G.721 document.
 */
static void
g72x_init_state(
        struct g72x_state *state_ptr)
{
    int		cnta;

    state_ptr->yl = 34816;
    state_ptr->yu = 544;
    state_ptr->dms = 0;
    state_ptr->dml = 0;
    state_ptr->ap = 0;
    for (cnta = 0; cnta < 2; cnta++) {
        state_ptr->a[cnta] = 0;
        state_ptr->pk[cnta] = 0;
        state_ptr->sr[cnta] = 32;
    }
    for (cnta = 0; cnta < 6; cnta++) {
        state_ptr->b[cnta] = 0;
        state_ptr->dq[cnta] = 32;
    }
    state_ptr->td = 0;
}

/*
 * predictor_zero()
 *
 * computes the estimated signal from 6-zero predictor.
 *
 */
static int
predictor_zero(
        struct g72x_state *state_ptr)
{
    int		i;
    int		sezi;

    sezi = fmult(state_ptr->b[0] >> 2, state_ptr->dq[0]);
    for (i = 1; i < 6; i++)			/* ACCUM */
        sezi += fmult(state_ptr->b[i] >> 2, state_ptr->dq[i]);
    return (sezi);
}
/*
 * predictor_pole()
 *
 * computes the estimated signal from 2-pole predictor.
 *
 */
static int
predictor_pole(
        struct g72x_state *state_ptr)
{
    return (fmult(state_ptr->a[1] >> 2, state_ptr->sr[1]) +
            fmult(state_ptr->a[0] >> 2, state_ptr->sr[0]));
}
/*
 * step_size()
 *
 * computes the quantization step size of the adaptive quantizer.
 *
 */
static int
step_size(
        struct g72x_state *state_ptr)
{
    int		y;
    int		dif;
    int		al;

    if (state_ptr->ap >= 256)
        return (state_ptr->yu);
    else {
        y = state_ptr->yl >> 6;
        dif = state_ptr->yu - y;
        al = state_ptr->ap >> 2;
        if (dif > 0)
            y += (dif * al) >> 6;
        else if (dif < 0)
            y += (dif * al + 0x3F) >> 6;
        return (y);
    }
}

/*
 * quantize()
 *
 * Given a raw sample, 'd', of the difference signal and a
 * quantization step size scale factor, 'y', this routine returns the
 * ADPCM codeword to which that sample gets quantized.  The step
 * size scale factor division operation is done in the log base 2 domain
 * as a subtraction.
 */
static int
quantize(
        int		d,	/* Raw difference signal sample */
        int		y,	/* Step size multiplier */
        short		*table,	/* quantization table */
        int		size)	/* table size of short integers */
{
    short		dqm;	/* Magnitude of 'd' */
    short		exp;	/* Integer part of base 2 log of 'd' */
    short		mant;	/* Fractional part of base 2 log */
    short		dl;	/* Log of magnitude of 'd' */
    short		dln;	/* Step size scale factor normalized log */
    int		i;

    /*
     * LOG
     *
     * Compute base 2 log of 'd', and store in 'dl'.
     */
    dqm = abs(d);
    exp = quan(dqm >> 1, power2, 15);
    mant = ((dqm << 7) >> exp) & 0x7F;	/* Fractional portion. */
    dl = (exp << 7) + mant;

    /*
     * SUBTB
     *
     * "Divide" by step size multiplier.
     */
    dln = dl - (y >> 2);

    /*
     * QUAN
     *
     * Obtain codword i for 'd'.
     */
    i = quan(dln, table, size);
    if (d < 0)			/* take 1's complement of i */
        return ((size << 1) + 1 - i);
    else if (i == 0)		/* take 1's complement of 0 */
        return ((size << 1) + 1); /* new in 1988 */
    else
        return (i);
}
/*
 * reconstruct()
 *
 * Returns reconstructed difference signal 'dq' obtained from
 * codeword 'i' and quantization step size scale factor 'y'.
 * Multiplication is performed in log base 2 domain as addition.
 */
static int
reconstruct(
        int		sign,	/* 0 for non-negative value */
        int		dqln,	/* G.72x codeword */
        int		y)	/* Step size multiplier */
{
    short		dql;	/* Log of 'dq' magnitude */
    short		dex;	/* Integer part of log */
    short		dqt;
    short		dq;	/* Reconstructed difference signal sample */

    dql = dqln + (y >> 2);	/* ADDA */

    if (dql < 0) {
        return ((sign) ? -0x8000 : 0);
    } else {		/* ANTILOG */
        dex = (dql >> 7) & 15;
        dqt = 128 + (dql & 127);
        dq = (dqt << 7) >> (14 - dex);
        return ((sign) ? (dq - 0x8000) : dq);
    }
}


/*
 * update()
 *
 * updates the state variables for each output code
 */
static void
update(
        int		code_size,	/* distinguish 723_40 with others */
        int		y,		/* quantizer step size */
        int		wi,		/* scale factor multiplier */
        int		fi,		/* for long/short term energies */
        int		dq,		/* quantized prediction difference */
        int		sr,		/* reconstructed signal */
        int		dqsez,		/* difference from 2-pole predictor */
        struct g72x_state *state_ptr)	/* coder state pointer */
{
    int		cnt;
    //short		mag, exp, mant;	/* Adaptive predictor, FLOAT A */
    short		mag, exp;	/* Adaptive predictor, FLOAT A */
    short		a2p = 0;		/* LIMC */
    short		a1ul;		/* UPA1 */
    //short		ua2, pks1;	/* UPA2 */
    //short		uga2a, fa1;
    //short		uga2b;
    short		pks1;	/* UPA2 */
    short		fa1;
    char		tr;		/* tone/transition detector */
    short		ylint, thr2, dqthr;
    short  		ylfrac, thr1;
    short		pk0;

    pk0 = (dqsez < 0) ? 1 : 0;	/* needed in updating predictor poles */

    mag = dq & 0x7FFF;		/* prediction difference magnitude */
    /* TRANS */
    ylint = state_ptr->yl >> 15;	/* exponent part of yl */
    ylfrac = (state_ptr->yl >> 10) & 0x1F;	/* fractional part of yl */
    thr1 = (32 + ylfrac) << ylint;		/* threshold */
    thr2 = (ylint > 9) ? 31 << 10 : thr1;	/* limit thr2 to 31 << 10 */
    dqthr = (thr2 + (thr2 >> 1)) >> 1;	/* dqthr = 0.75 * thr2 */
    if (state_ptr->td == 0)		/* signal supposed voice */
        tr = 0;
    else if (mag <= dqthr)		/* supposed data, but small mag */
        tr = 0;			/* treated as voice */
    else				/* signal is data (modem) */
        tr = 1;

    /*
     * Quantizer scale factor adaptation.
     */

    /* FUNCTW & FILTD & DELAY */
    /* update non-steady state step size multiplier */
    state_ptr->yu = y + ((wi - y) >> 5);

    /* LIMB */
    if (state_ptr->yu < 544)	/* 544 <= yu <= 5120 */
        state_ptr->yu = 544;
    else if (state_ptr->yu > 5120)
        state_ptr->yu = 5120;

    /* FILTE & DELAY */
    /* update steady state step size multiplier */
    state_ptr->yl += state_ptr->yu + ((-state_ptr->yl) >> 6);

    /*
     * Adaptive predictor coefficients.
     */
    if (tr == 1) {			/* reset a's and b's for modem signal */
        state_ptr->a[0] = 0;
        state_ptr->a[1] = 0;
        state_ptr->b[0] = 0;
        state_ptr->b[1] = 0;
        state_ptr->b[2] = 0;
        state_ptr->b[3] = 0;
        state_ptr->b[4] = 0;
        state_ptr->b[5] = 0;
    } else {			/* update a's and b's */
        pks1 = pk0 ^ state_ptr->pk[0];		/* UPA2 */

        /* update predictor pole a[1] */
        a2p = state_ptr->a[1] - (state_ptr->a[1] >> 7);
        if (dqsez != 0) {
            fa1 = (pks1) ? state_ptr->a[0] : -state_ptr->a[0];
            if (fa1 < -8191)	/* a2p = function of fa1 */
                a2p -= 0x100;
            else if (fa1 > 8191)
                a2p += 0xFF;
            else
                a2p += fa1 >> 5;

            if (pk0 ^ state_ptr->pk[1])
                /* LIMC */
                if (a2p <= -12160)
                    a2p = -12288;
                else if (a2p >= 12416)
                    a2p = 12288;
                else
                    a2p -= 0x80;
            else if (a2p <= -12416)
                a2p = -12288;
            else if (a2p >= 12160)
                a2p = 12288;
            else
                a2p += 0x80;
        }

        /* TRIGB & DELAY */
        state_ptr->a[1] = a2p;

        /* UPA1 */
        /* update predictor pole a[0] */
        state_ptr->a[0] -= state_ptr->a[0] >> 8;
        if (dqsez != 0){
            if (pks1 == 0)
                state_ptr->a[0] += 192;
            else
                state_ptr->a[0] -= 192;
        }

        /* LIMD */
        a1ul = 15360 - a2p;
        if (state_ptr->a[0] < -a1ul)
            state_ptr->a[0] = -a1ul;
        else if (state_ptr->a[0] > a1ul)
            state_ptr->a[0] = a1ul;

        /* UPB : update predictor zeros b[6] */
        for (cnt = 0; cnt < 6; cnt++) {
            if (code_size == 5)		/* for 40Kbps G.723 */
                state_ptr->b[cnt] -= state_ptr->b[cnt] >> 9;
            else			/* for G.721 and 24Kbps G.723 */
                state_ptr->b[cnt] -= state_ptr->b[cnt] >> 8;
            if (dq & 0x7FFF) {			/* XOR */
                if ((dq ^ state_ptr->dq[cnt]) >= 0)
                    state_ptr->b[cnt] += 128;
                else
                    state_ptr->b[cnt] -= 128;
            }
        }
    }

    for (cnt = 5; cnt > 0; cnt--)
        state_ptr->dq[cnt] = state_ptr->dq[cnt-1];
    /* FLOAT A : convert dq[0] to 4-bit exp, 6-bit mantissa f.p. */
    if (mag == 0) {
        state_ptr->dq[0] = (dq >= 0) ? 0x20 : 0xFC20;
    } else {
        exp = quan(mag, power2, 15);
        state_ptr->dq[0] = (dq >= 0) ?
            (exp << 6) + ((mag << 6) >> exp) :
            (exp << 6) + ((mag << 6) >> exp) - 0x400;
    }

    state_ptr->sr[1] = state_ptr->sr[0];
    /* FLOAT B : convert sr to 4-bit exp., 6-bit mantissa f.p. */
    if (sr == 0) {
        state_ptr->sr[0] = 0x20;
    } else if (sr > 0) {
        exp = quan(sr, power2, 15);
        state_ptr->sr[0] = (exp << 6) + ((sr << 6) >> exp);
    } else if (sr > -32768) {
        mag = -sr;
        exp = quan(mag, power2, 15);
        state_ptr->sr[0] =  (exp << 6) + ((mag << 6) >> exp) - 0x400;
    } else
        state_ptr->sr[0] = 0xFC20;

    /* DELAY A */
    state_ptr->pk[1] = state_ptr->pk[0];
    state_ptr->pk[0] = pk0;

    /* TONE */
    if (tr == 1)		/* this sample has been treated as data */
        state_ptr->td = 0;	/* next one will be treated as voice */
    else if (a2p < -11776)	/* small sample-to-sample correlation */
        state_ptr->td = 1;	/* signal may be data */
    else				/* signal is voice */
        state_ptr->td = 0;

    /*
     * Adaptation speed control.
     */
    state_ptr->dms += (fi - state_ptr->dms) >> 5;		/* FILTA */
    state_ptr->dml += (((fi << 2) - state_ptr->dml) >> 7);	/* FILTB */

    if (tr == 1)
        state_ptr->ap = 256;
    else if (y < 1536)					/* SUBTC */
        state_ptr->ap += (0x200 - state_ptr->ap) >> 4;
    else if (state_ptr->td == 1)
        state_ptr->ap += (0x200 - state_ptr->ap) >> 4;
    else if (abs((state_ptr->dms << 2) - state_ptr->dml) >=
            (state_ptr->dml >> 3))
        state_ptr->ap += (0x200 - state_ptr->ap) >> 4;
    else
        state_ptr->ap += (-state_ptr->ap) >> 4;
}

int pack_output(
        unsigned                code,
        int                     bits)
{
    static unsigned int     out_buffer = 0;
    static int              out_bits = 0;
    unsigned char 		out_byte;

    out_buffer |= (code << out_bits);
    out_bits += bits;
    if (out_bits >= 8) {
        out_byte = out_buffer & 0xff;
        out_bits -= 8;
        out_buffer >>= 8;
        fwrite(&out_byte, 1, 1, fd_out);
    }
    return (out_bits > 0);
}

/*
 * g723_24_encoder()
 *
 * Encodes a linear PCM, A-law or u-law input sample and returns its 3-bit code.
 * Returns -1 if invalid input coding value.
 */
int
g723_24_encoder(
        int		sl,
        int		in_coding,
        struct g72x_state *state_ptr)
{
    /*
     * Maps G.723_24 code word to reconstructed scale factor normalized log
     * magnitude values.
     */
    static short	_dqlntab[8] = {-2048, 135, 273, 373, 373, 273, 135, -2048};

    /* Maps G.723_24 code word to log of scale factor multiplier. */
    static short	_witab[8] = {-128, 960, 4384, 18624, 18624, 4384, 960, -128};

    /*
     * Maps G.723_24 code words to a set of values whose long and short
     * term averages are computed and then compared to give an indication
     * how stationary (steady state) the signal is.
     */
    static short	_fitab[8] = {0, 0x200, 0x400, 0xE00, 0xE00, 0x400, 0x200, 0};

    static short qtab_723_24[3] = {8, 218, 331};
    // end of table 
    short		sei, sezi, se, sez;	/* ACCUM */
    short		d;			/* SUBTA */
    short		y;			/* MIX */
    short		sr;			/* ADDB */
    short		dqsez;			/* ADDC */
    short		dq, i;

    switch (in_coding) {	/* linearize input sample to 14-bit PCM */
        case AUDIO_ENCODING_ALAW:
            sl = alaw2linear(sl) >> 2;
            break;
        case AUDIO_ENCODING_ULAW:
            sl = ulaw2linear(sl) >> 2;
            break;
        case AUDIO_ENCODING_LINEAR:
            sl >>= 2;		/* sl of 14-bit dynamic range */
            break;
        default:
            return (-1);
    }

    sezi = predictor_zero(state_ptr);
    sez = sezi >> 1;
    sei = sezi + predictor_pole(state_ptr);
    se = sei >> 1;			/* se = estimated signal */

    d = sl - se;			/* d = estimation diff. */

    /* quantize prediction difference d */
    y = step_size(state_ptr);	/* quantizer step size */
    i = quantize(d, y, qtab_723_24, 3);	/* i = ADPCM code */
    dq = reconstruct(i & 4, _dqlntab[i], y); /* quantized diff. */

    sr = (dq < 0) ? se - (dq & 0x3FFF) : se + dq; /* reconstructed signal */

    dqsez = sr + sez - se;		/* pole prediction diff. */

    update(3, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

    return (i);
}

/*
 * g721_encoder()
 *
 * Encodes the input vale of linear PCM, A-law or u-law data sl and returns
 * the resulting code. -1 is returned for unknown input coding value.
 */
int
g721_encoder(
        int		sl,
        int		in_coding,
        struct g72x_state *state_ptr)
{
    static short qtab_721[7] = {-124, 80, 178, 246, 300, 349, 400};
    /*
     * Maps G.721 code word to reconstructed scale factor normalized log
     * magnitude values.
     */
    static short	_dqlntab[16] = {-2048, 4, 135, 213, 273, 323, 373, 425,
        425, 373, 323, 273, 213, 135, 4, -2048};

    /* Maps G.721 code word to log of scale factor multiplier. */
    static short	_witab[16] = {-12, 18, 41, 64, 112, 198, 355, 1122,
        1122, 355, 198, 112, 64, 41, 18, -12};
    /*
     * Maps G.721 code words to a set of values whose long and short
     * term averages are computed and then compared to give an indication
     * how stationary (steady state) the signal is.
     */
    static short	_fitab[16] = {0, 0, 0, 0x200, 0x200, 0x200, 0x600, 0xE00,
        0xE00, 0x600, 0x200, 0x200, 0x200, 0, 0, 0};
    // end of table

    short		sezi, se, sez;		/* ACCUM */
    short		d;			/* SUBTA */
    short		sr;			/* ADDB */
    short		y;			/* MIX */
    short		dqsez;			/* ADDC */
    short		dq, i;

    switch (in_coding) {	/* linearize input sample to 14-bit PCM */
        case AUDIO_ENCODING_ALAW:
            sl = alaw2linear(sl) >> 2;
            break;
        case AUDIO_ENCODING_ULAW:
            sl = ulaw2linear(sl) >> 2;
            break;
        case AUDIO_ENCODING_LINEAR:
            sl >>= 2;			/* 14-bit dynamic range */
            break;
        default:
            return (-1);
    }

    sezi = predictor_zero(state_ptr);
    sez = sezi >> 1;
    se = (sezi + predictor_pole(state_ptr)) >> 1;	/* estimated signal */

    d = sl - se;				/* estimation difference */

    /* quantize the prediction difference */
    y = step_size(state_ptr);		/* quantizer step size */
    i = quantize(d, y, qtab_721, 7);	/* i = ADPCM code */

    dq = reconstruct(i & 8, _dqlntab[i], y);	/* quantized est diff */

    sr = (dq < 0) ? se - (dq & 0x3FFF) : se + dq;	/* reconst. signal */

    dqsez = sr + sez - se;			/* pole prediction diff. */

    update(4, y, _witab[i] << 5, _fitab[i], dq, sr, dqsez, state_ptr);

    return (i);
}

/*
 * g723_40_encoder()
 *
 * Encodes a 16-bit linear PCM, A-law or u-law input sample and retuens
 * the resulting 5-bit CCITT G.723 40Kbps code.
 * Returns -1 if the input coding value is invalid.
 */
int
g723_40_encoder(
        int		sl,
        int		in_coding,
        struct g72x_state *state_ptr)
{
    /*
     * Maps G.723_40 code word to ructeconstructed scale factor normalized log
     * magnitude values.
     */
    static short	_dqlntab[32] = {-2048, -66, 28, 104, 169, 224, 274, 318,
        358, 395, 429, 459, 488, 514, 539, 566,
        566, 539, 514, 488, 459, 429, 395, 358,
        318, 274, 224, 169, 104, 28, -66, -2048};

    /* Maps G.723_40 code word to log of scale factor multiplier. */
    static short	_witab[32] = {448, 448, 768, 1248, 1280, 1312, 1856, 3200,
        4512, 5728, 7008, 8960, 11456, 14080, 16928, 22272,
        22272, 16928, 14080, 11456, 8960, 7008, 5728, 4512,
        3200, 1856, 1312, 1280, 1248, 768, 448, 448};

    /*
     * Maps G.723_40 code words to a set of values whose long and short
     * term averages are computed and then compared to give an indication
     * how stationary (steady state) the signal is.
     */
    static short	_fitab[32] = {0, 0, 0, 0, 0, 0x200, 0x200, 0x200,
        0x200, 0x200, 0x400, 0x600, 0x800, 0xA00, 0xC00, 0xC00,
        0xC00, 0xC00, 0xA00, 0x800, 0x600, 0x400, 0x200, 0x200,
        0x200, 0x200, 0x200, 0, 0, 0, 0, 0};

    static short qtab_723_40[15] = {-122, -16, 68, 139, 198, 250, 298, 339,
        378, 413, 445, 475, 502, 528, 553};
    // end of table

    short		sei, sezi, se, sez;	/* ACCUM */
    short		d;			/* SUBTA */
    short		y;			/* MIX */
    short		sr;			/* ADDB */
    short		dqsez;			/* ADDC */
    short		dq, i;

    switch (in_coding) {	/* linearize input sample to 14-bit PCM */
        case AUDIO_ENCODING_ALAW:
            sl = alaw2linear(sl) >> 2;
            break;
        case AUDIO_ENCODING_ULAW:
            sl = ulaw2linear(sl) >> 2;
            break;
        case AUDIO_ENCODING_LINEAR:
            sl >>= 2;		/* sl of 14-bit dynamic range */
            break;
        default:
            return (-1);
    }

    sezi = predictor_zero(state_ptr);
    sez = sezi >> 1;
    sei = sezi + predictor_pole(state_ptr);
    se = sei >> 1;			/* se = estimated signal */

    d = sl - se;			/* d = estimation difference */

    /* quantize prediction difference */
    y = step_size(state_ptr);	/* adaptive quantizer step size */
    i = quantize(d, y, qtab_723_40, 15);	/* i = ADPCM code */

    dq = reconstruct(i & 0x10, _dqlntab[i], y);	/* quantized diff */

    sr = (dq < 0) ? se - (dq & 0x7FFF) : se + dq; /* reconstructed signal */

    dqsez = sr + sez - se;		/* dqsez = pole prediction diff. */

    update(5, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

    return (i);
}


/////////////////////////////////////
// internal variables
/////////////////////////////////////

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
    // ##INIT_PORT_SECTION::START
//    port_out = init_task_port(TASK_ID, "out");
    // ##INIT_PORT_SECTION::END

    g72x_init_state(&state);

    /* Set defaults to linear, G.723 output */
    in_coding = AUDIO_ENCODING_LINEAR;
    in_size = sizeof (short);
    in_buf = (unsigned *)&sample_short;
    enc_routine = g723_40_encoder;
    enc_bits = 5;

    /* Process encoding argument, if any */
    switch (samplingRate) {
        case 3:
            printf("g723_24_encoder\n");
            enc_routine = g723_24_encoder;
            enc_bits = 3;
            break;
        case 4:
            printf("g721_encoder\n");
            enc_routine = g721_encoder;
            enc_bits = 4;
            break;
        case 5: 	
            printf("g723_40_encoder\n");
            enc_routine = g723_40_encoder;
            enc_bits = 5;
            break;
        default:
            printf("Error: unknown samplingRate\n");
            exit(1);
    }
    switch (codingType) {
        case 1:
            printf("AUDIO_ENDOING_ULAW\n");
            in_coding = AUDIO_ENCODING_ULAW;
            in_size = sizeof(char);
            in_buf = (unsigned *)&sample_char;
            break;
        case 2:
            printf("AUDIO_ENDOING_ALAW\n");
            in_coding = AUDIO_ENCODING_ALAW;
            in_size = sizeof(char);
            in_buf = (unsigned *)&sample_char;
            break;
        case 3:
            printf("AUDIO_ENDOING_LINEAR\n");
            in_coding = AUDIO_ENCODING_LINEAR;
            in_size = sizeof(short);
            in_buf = (unsigned *)&sample_short;
            break;
        default:	
            printf("Error: unknown codingType\n");
            exit(1);
    }
    // TODO: task initialize code

    fd_in = fopen("car16.qcf", "rb");
    fd_out = fopen("result_enc.wav", "wb");
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int i = 0;
    //printf("Read input and process\n"); 
    while(fread((char *)in_buf, in_size, 1, fd_in)) {
        code = (*enc_routine)(in_size == 2 ? sample_short : sample_char, in_coding, &state);
        resid = pack_output(code, enc_bits);
        i++;
    }	

    //printf("Write zero codes until all residual codes are written out\n");
    while (resid) {
        resid = pack_output(0, enc_bits);
        i++;
    }
    printf("G.723Enc end\n");
    SYS_REQ(END_TASK, TASK_NAME);

}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    fclose(fd_in);
    fclose(fd_out);
    /*
    int t=0;
    MQ_SEND(port_out, (unsigned char*)&t, sizeof(int));
    */
}

TASK_CODE_END
