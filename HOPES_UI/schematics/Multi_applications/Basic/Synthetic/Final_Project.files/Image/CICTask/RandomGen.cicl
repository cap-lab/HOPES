// You SHOULD NOT forget to use the access modifier "static"
//
#define SIZE 1000
#include <math.h>

static double prob[SIZE];
static double Prob[SIZE];

LIBFUNC(void, init, void) {
  //.. something to do for initialization
	int i=0, j=0;
        double Variance = 30.0;
  	double Area = 0.0;
 
	j = -SIZE / 2;
	Area = 1.0 / sqrt(2 * M_PI * Variance);
	prob[0] = Area * exp(-(j * j) / (2 * Variance));
	Prob[0] = 0;
	for (i = 1; i < SIZE; i++, j++)
	{
		prob[i] = Area * exp(-(j * j) / (2 * Variance));
		Prob[i] = Prob[i - 1] + (prob[i - 1] + prob[i]) / 2;
	}
}
 
LIBFUNC(void, wrapup, void) {
  //.. something to do for finalization
}

LIBFUNC(int, Noise, void){
   int Low = 0;
   int Mid = (SIZE - 1) / 2;
   int High = SIZE - 1;
   int Random = 1 + rand() % (SIZE - 1);

   while (Low < High)
   {
      Mid = (Low + High) / 2;
      if (Prob[Mid] * SIZE < Random)
	 Low = Mid + 1;
      else if (Prob[Mid] * SIZE > Random)
	 High = Mid - 1;
      else
	 Low = High = Mid;
   }

   return (Mid);
}


