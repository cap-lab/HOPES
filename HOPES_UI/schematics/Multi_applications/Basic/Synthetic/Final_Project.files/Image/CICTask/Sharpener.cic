/************************************
 *
 * File : Sharpener.cic
 * Date : Oct 29, 2013 11:15 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
//#define WIDTH 1920
//#define HEIGHT 1080
#define WIDTH 600
#define HEIGHT 400
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_in;
STATIC int port_out;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char *src;
STATIC unsigned char *dst;

STATIC int filter_size = 3;
STATIC int filter[3][3] =
    { {  0, -1,  0, },
      { -1,  5, -1, },
      {  0, -1,  0  } };
STATIC int filter_scaling = 1;


/*
STATIC int filter_size = 3;
STATIC int filter[3][3] =
    { {  1,  1,  1, },
      {  1,  1,  1, },
      {  1,  1,  1  } };
STATIC int filter_scaling = 9;
*/
/*
STATIC int filter_size = 5;
STATIC int filter[5][5] =
    { {  0,  0, -1,  0,  0, },
      {  0,  0,  1,  0,  0, },
      { -1,  1,  1,  1, -1, },      
      {  0,  0,  1,  0,  0, },
      {  0,  0, -1,  0,  0, } };
STATIC int filter_scaling = 1;
*/

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in = PORT_INITIALIZE(TASK_ID, "in");
    port_out = PORT_INITIALIZE(TASK_ID, "out");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    src    = (unsigned char*)malloc(WIDTH * HEIGHT * 3);
    dst    = (unsigned char*)malloc(WIDTH * HEIGHT * 3);
}

/////////////////////////////////////
// go code
/////////////////////////////////////
TASK_GO
{
    // TODO: task main code
    int x, y, fx, fy, ex, ey;
    int vr, vg, vb, va, v;

    MQ_RECEIVE(port_in, (unsigned char*)src, WIDTH * HEIGHT * 3);

    for (y = 0; y < HEIGHT-1; ++y) {
        for (x = 0; x < WIDTH-1; ++x) {
        
            vr = vg = vb  = 0;

            for (fy = -(filter_size / 2); fy <= (filter_size / 2); ++fy) {
                for (fx = -(filter_size / 2); fx <= (filter_size / 2); ++fx) {

                    ex = x + fx; if ((ex < 0) || (ex >= WIDTH))  ex = x - fx;
                    ey = y + fy; if ((ey < 0) || (ey >= HEIGHT)) ey = y - fy;

                    int v0 = src[(ey * WIDTH + ex)*3 + 0];
                    int v1 = src[(ey * WIDTH + ex)*3 + 1];
                    int v2 = src[(ey * WIDTH + ex)*3 + 2];

                    vr += v0 * filter[fy + (filter_size / 2)][fx + (filter_size / 2)] / filter_scaling;
                    vg += v1 * filter[fy + (filter_size / 2)][fx + (filter_size / 2)] / filter_scaling;
                    vb += v2 * filter[fy + (filter_size / 2)][fx + (filter_size / 2)] / filter_scaling;
                }
            }

            if (vr > 255) vr = 255; if (vr < 0) vr = 0;
            if (vg > 255) vg = 255; if (vg < 0) vg = 0;
            if (vb > 255) vb = 255; if (vb < 0) vb = 0;
            if (va > 255) va = 255; if (va < 0) va = 0;

            dst[(y * WIDTH + x) * 3 + 0] = vr;
            dst[(y * WIDTH + x) * 3 + 1] = vg;
            dst[(y * WIDTH + x) * 3 + 2] = vb;
        }
    }

    MQ_SEND(port_out, (unsigned char*)dst, WIDTH * HEIGHT * 3);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    free(src);
    free(dst);
}

TASK_CODE_END
