/************************************
 *
 * File : CPU_Sharpen_F.cic
 * Date : Mar 21, 2018 12:31 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char *src;
STATIC unsigned char *dst;

STATIC int filter_size = 3;
STATIC int filter[3][3] =
    { {  0, -1,  0, },
      { -1,  5, -1, },
      {  0, -1,  0  } };
STATIC int filter_scaling = 1;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    cudaMalloc((void **) &src, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &dst, WIDTH*HEIGHT*3);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

__global__ void Sharpen(unsigned char *src, unsigned char *dst, int imageW, int imageH)
{
    int filter_size = 3;
    int filter[3][3] =
    { {  0, -1,  0, },
      { -1,  5, -1, },
      {  0, -1,  0  } };
    int filter_scaling = 1;

    const int ix = blockDim.x * blockIdx.x + threadIdx.x;
    const int iy = blockDim.y * blockIdx.y + threadIdx.y;

    int fx, fy, ex, ey;
    int vr, vg, vb;

    vr = vg = vb = 0;

    for (fy = -(filter_size / 2); fy <= (filter_size / 2); ++fy) {
        for (fx = -(filter_size / 2); fx <= (filter_size / 2); ++fx) {
            ex = ix + fx; 
            if ((ex < 0) || (ex >= imageW))  ex = ix - fx;
            ey = iy + fy; 
            if ((ey < 0) || (ey >= imageH)) ey = iy - fy;

            int v0 = src[(ey * imageW + ex)*3 + 0];
            int v1 = src[(ey * imageW + ex)*3 + 1];
            int v2 = src[(ey * imageW + ex)*3 + 2];

            vr += v0 * filter[fy + (filter_size / 2)][fx + (filter_size / 2)] / filter_scaling;
            vg += v1 * filter[fy + (filter_size / 2)][fx + (filter_size / 2)] / filter_scaling;
            vb += v2 * filter[fy + (filter_size / 2)][fx + (filter_size / 2)] / filter_scaling;

        }
    }

    if (vr > 255) vr = 255; if (vr < 0) vr = 0;
    if (vg > 255) vg = 255; if (vg < 0) vg = 0;
    if (vb > 255) vb = 255; if (vb < 0) vb = 0;

    dst[(iy * imageW + ix) * 3 + 0] = vr;
    dst[(iy * imageW + ix) * 3 + 1] = vg;
    dst[(iy * imageW + ix) * 3 + 2] = vb;

}

TASK_GO
{
    // TODO: task main code
    int x, y, fx, fy, ex, ey;
    int vr, vg, vb, va, v;

    MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3);

    KERNEL_CALL(Sharpen, src, dst, WIDTH, HEIGHT);
    
    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(src);
    cudaFree(dst);
}

TASK_CODE_END
