/************************************
 *
 * File : CPU_Draw_Lane.cic
 * Date : Mar 21, 2018 2:16 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <math.h>

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720
#define MAX_ANGLE 360
#define MAX_R 2077
#define ISEDGE 50
#define PI 3.141592
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC int* src;
STATIC unsigned char* dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    src = (int*)malloc(MAX_R * MAX_ANGLE * sizeof(int));
    dst = (unsigned char*)malloc(WIDTH*HEIGHT*3);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

void swap(int *x, int *y)
{
    int temp=0;
    temp = *y;
    *y = *x;
    *x = temp;
}

TASK_GO
{
    // TODO: task main code
    int x, y = 0;
    int angle = 0;
    int r = 0;
    int iter = 0;

    int x_1[2], y_1[2], x_2[2], y_2[2] = {0, };
    int hough_max_left = 0;
    int hough_max_right = 0;
    int last_angle[2] = {0, };
    int last_r[2] = {0, };

    memset(dst, 0x0, WIDTH*HEIGHT*3);

    MQ_RECEIVE(port_input, (unsigned char*)src, MAX_R * MAX_ANGLE * sizeof(int));

    for(angle = 0; angle < MAX_ANGLE; angle++){
        for(r = 0; r < MAX_R; r++){
            if(((int)src[(angle * MAX_R + r)] > hough_max_left) && (angle > 50 && angle <130)){
                hough_max_left = (int)src[(angle * MAX_R + r)];
                last_angle[0] = (int)(angle * 180 / MAX_ANGLE);
                last_r[0] = (int)(r - (MAX_R/2));
            }
            else if(((int)src[(angle * MAX_R + r)] > hough_max_right) && (angle > 230 && angle < 310)){
                hough_max_right = (int)src[(angle * MAX_R + r)];
                last_angle[1] = (int)(angle * 180 / MAX_ANGLE);
                last_r[1] = (int)(r - (MAX_R/2));
            }
        }
    }

    for(iter = 0; iter < 2; iter++){
        x_1[iter] = 0;
        y_1[iter] = (int)floor(last_r[iter] / cos(last_angle[iter] * PI / 180) + 0.5);
        x_2[iter] = WIDTH - 1;
        y_2[iter] = (int)floor((last_r[iter] - (int)((double)x_2[iter] * sin(last_angle[iter] * PI / 180))) / cos(last_angle[iter] * PI / 180) + 0.5);
    }

    int meet_x, meet_y = 0;
    float t;
    float s;
    float under = (y_2[1] - y_1[1]) * (x_2[0] - x_1[0]) - (x_2[1] - x_1[1]) * (y_2[0] - y_1[0]);

    t = (x_2[1] - x_1[1]) * (y_1[0] - y_1[1]) - (y_2[1] - y_1[1]) * (x_1[0] - x_1[1]);
    s = (x_2[0] - x_1[0]) * (y_1[0] - y_1[1]) - (y_2[0] - y_1[0]) * (x_1[0] - x_1[1]);

    t = t/under;
    s = s/under;

    meet_x = x_1[0] + t * (x_2[0] - x_1[0]);
    meet_y = y_1[0] + t * (y_2[0] - y_1[0]);

    int x1, x2, y1, y2 = 0;
    for(iter = 0; iter < 2; ++iter){
        x1 = x_1[iter];
        y1 = y_1[iter];
        x2 = x_2[iter];
        y2 = y_2[iter];

        //printf("angle: %d, r: %d (%d %d) (%d %d)    - x2 : %d, other : %f -\n", last_angle, last_r, x1, y1, x2, y2, x2, sin(last_angle * PI / 180));

        double m = (double)(y2 - y1)/(x2 - x1);

        if( (m > -1) && (m < 1) )
        {
            if( x1 > x2 )
            {
                swap(&x1, &x2);
                swap(&y1, &y2);
            }

            for( x = x1 ; x <= x2 ; x++ )
            {
                y = (int)floor(m * (x - x1) + y1 + 0.5);
                if( (y >= 0 && y < HEIGHT) && (y > meet_y) ){ 
                    dst[(y * WIDTH + x) * 3 + 0] = 255;
                    dst[(y * WIDTH + x) * 3 + 1] = 0;
                    dst[(y * WIDTH + x) * 3 + 2] = 0;
                }
            }
        }
        else
        {
            if( y1 > y2 )
            {
                swap(&x1, &x2);
                swap(&y1, &y2);
            }

            for( y = y1 ; y <= y2 ; y++ )
            {
                x = (int)floor((y - y1) / m + x1 + 0.5);
                if( (y >= 0 && y < HEIGHT) && (y > meet_y) ){ 
                    dst[(y * WIDTH + x) * 3 + 0] = 255;
                    dst[(y * WIDTH + x) * 3 + 1] = 0;
                    dst[(y * WIDTH + x) * 3 + 2] = 0;
                }
            }
        }
    }
    
    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    free(src);
    free(dst);
}

TASK_CODE_END
