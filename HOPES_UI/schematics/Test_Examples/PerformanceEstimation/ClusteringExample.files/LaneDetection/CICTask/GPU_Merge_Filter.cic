/************************************
 *
 * File : GPU_Merge_F.cic
 * Date : Mar 21, 2018 2:17 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input_origin;
STATIC int port_input_hough;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char *src_o;
STATIC unsigned char *src_h;
STATIC unsigned char *dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input_origin = PORT_INITIALIZE(TASK_ID, "input_origin");
    port_input_hough = PORT_INITIALIZE(TASK_ID, "input_hough");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    cudaMalloc((void **) &src_o, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &src_h, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &dst, WIDTH*HEIGHT*3);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

__global__ void Merge_2(unsigned char *src_o, unsigned char *src_h, unsigned char *dst, int imageW, int imageH)
{
    const int ix = blockDim.x * blockIdx.x + threadIdx.x;
    const int iy = blockDim.y * blockIdx.y + threadIdx.y;

    if(ix < imageW && iy < imageH){
        if(src_h[(imageW * iy + ix) * 3 + 0] == 255 && src_h[(imageW * iy + ix) * 3 + 1] == 0 && src_h[(imageW * iy + ix) * 3 + 2] == 0){
            dst[(imageW * iy + ix) * 3 + 0] = 255;
            dst[(imageW * iy + ix) * 3 + 1] = 0;
            dst[(imageW * iy + ix) * 3 + 2] = 0;
        }
        else{
            dst[(imageW * iy + ix) * 3 + 0] = src_o[(imageW * iy + ix) * 3 + 0];
            dst[(imageW * iy + ix) * 3 + 1] = src_o[(imageW * iy + ix) * 3 + 1];
            dst[(imageW * iy + ix) * 3 + 2] = src_o[(imageW * iy + ix) * 3 + 2];
        }
    };
}

TASK_GO
{
    // TODO: task main code
    MQ_RECEIVE(port_input_origin, (unsigned char*)src_o, WIDTH * HEIGHT * 3);
    //printf("Merge_MQ_RECEIVE_FINISH!\n");
    MQ_RECEIVE(port_input_hough, (unsigned char*)src_h, WIDTH * HEIGHT * 3);
    //printf("Merge_MQ_RECEIVE_FINISH!\n");
       
    KERNEL_CALL(Merge_2, src_o, src_h, dst, WIDTH, HEIGHT);
    
    MQ_SEND(port_output, (unsigned char*)dst, WIDTH * HEIGHT * 3);
    //printf("Merge_MQ_SEND_FINISH!\n");
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    
    cudaFree(src_o);
    cudaFree(src_h);
    cudaFree(dst);
}

TASK_CODE_END
