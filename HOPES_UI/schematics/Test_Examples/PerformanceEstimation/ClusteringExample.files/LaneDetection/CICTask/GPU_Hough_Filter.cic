/************************************
 *
 * File : CPU_Hough_F.cic
 * Date : Mar 21, 2018 2:15 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <stdio.h>

#include "cuda.h"
#include "cuda_runtime.h"

#include <math.h>

// ##DEFINE_SECTION::START
#define WIDTH 1280
#define HEIGHT 720

#define MAX_ANGLE 360
#define MAX_R 2077
#define ISEDGE 50
#define PI 3.141592
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END

STATIC unsigned char* src;
STATIC unsigned char* dst;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    cudaMalloc((void **) &src, WIDTH*HEIGHT*3);
    cudaMalloc((void **) &dst, MAX_ANGLE * MAX_R * sizeof(int));
}


/////////////////////////////////////
// go code
/////////////////////////////////////

__global__ void Hough(unsigned char *src, unsigned char *dst, int imageW, int imageH, int max_angle, int max_r)
{
    const int ix = blockDim.x * blockIdx.x + threadIdx.x;
    const int iy = blockDim.y * blockIdx.y + threadIdx.y;

    int angle = 0;
    int r = 0;
    int *t = (int*)dst;

    if(src[(imageW * iy + ix)*3] > 50)
    {
        for(angle = 0; angle < max_angle; angle++){
            r = (int)floor(((float)ix * __sinf(angle * PI / max_angle)) + ((float)iy * __cosf(angle * PI / max_angle)) + (float)0.5);
            r += (max_r/2);
            atomicAdd(&t[(angle * max_r + r)], 1);
            //t[(angle * max_r + r)]++;
        }
    }
}

TASK_GO
{
    // TODO: task main code
    int x, y = 0;
    int angle = 0;
    int r = 0;

    MQ_RECEIVE(port_input, (unsigned char*)src, WIDTH * HEIGHT * 3);
    
    cudaMemset(dst, 0x0, MAX_ANGLE * MAX_R * sizeof(int));

    KERNEL_CALL(Hough, src, dst, WIDTH, HEIGHT, MAX_ANGLE, MAX_R);

    MQ_SEND(port_output, (unsigned char*)dst, MAX_R * MAX_ANGLE * sizeof(int));
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    cudaFree(src);
    cudaFree(dst);
}

TASK_CODE_END
