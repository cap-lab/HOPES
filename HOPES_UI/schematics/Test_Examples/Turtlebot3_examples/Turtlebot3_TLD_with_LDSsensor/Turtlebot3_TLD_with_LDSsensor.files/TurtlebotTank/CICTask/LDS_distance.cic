/************************************
 *
 * File : LDS.cic
 * Date : Mar 18, 2019 5:18 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
//#include "lds_driver.h"
#include <stdint.h>
#include <stdlib.h>
#include <inttypes.h>
#include <iostream>
#include <limits.h>

using namespace std;

#define THETA_MAX 90

#define MAX_DISTANCE std::numeric_limits<uint16_t>::max()
#define FILTERED_DISTANCE -1  //-1 distance filtered distance

typedef struct _SDistance{
    int distance[2 * THETA_MAX + 1];        
} SDistance; 

static AngularDistance stAngularDistance;
static SDistance stDistance; 


// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END

TASK_CODE_BEGIN

namespace lds
{
	LFCDLaser::LFCDLaser(const std::string& port, uint32_t baud_rate, boost::asio::io_service& io)
		: port_(port), baud_rate_(baud_rate), shutting_down_(false), serial_(io, port_)
	{
		try{
			serial_.set_option(boost::asio::serial_port_base::baud_rate(baud_rate_));
			// Below command is not required after firmware upgrade (2017.10)
			boost::asio::write(serial_, boost::asio::buffer("b", 1));  // start motor
			printf("LDS laser initialize!\n");  
		}
		catch (boost::system::system_error ex)
		{
			printf("An exception was thrown when lds initializing: %s", ex.what());
		}

	}

	LFCDLaser::~LFCDLaser()
	{
		boost::asio::write(serial_, boost::asio::buffer("e", 1));  // stop motor
	}

	void LFCDLaser::start_motor()
	{
		boost::asio::write(serial_, boost::asio::buffer("b", 1));  // stop motor
	}

	void LFCDLaser::poll(AngularDistance* stAngularDistance)
	{
		uint8_t start_count = 0;
		bool got_scan = false;
		boost::array<uint8_t, 2520> raw_bytes;
		//uint8_t good_sets = 0;
		uint32_t motor_speed = 0;
		rpms=0;
		int index;
		
		while (!shutting_down_ && !got_scan)
		{
			// Wait until first data sync of frame: 0xFA, 0xA0
			boost::asio::read(serial_, boost::asio::buffer(&raw_bytes[start_count],1));

			if(start_count == 0)
			{
				if(raw_bytes[start_count] == 0xFA)
				{
					start_count = 1;
				}
			}
			else if(start_count == 1)
			{
				if(raw_bytes[start_count] == 0xA0)
				{
					start_count = 0;

					// Now that entire start sequence has been found, read in the rest of the message
					got_scan = true;										
					boost::asio::read(serial_,boost::asio::buffer(&raw_bytes[2], 2518));										
					// scan->angle_min = 0.0;
					// scan->angle_max = 2.0*M_PI;
					// scan->angle_increment = (2.0*M_PI/360.0);
					// scan->range_min = 0.12; //120mm //120 / 1000 = 0.12m
					// scan->range_max = 3.5; //3500mm
					// scan->ranges.resize(360);
					// scan->intensities.resize(360);

					//read data in sets of 6

					for(uint16_t i = 0; i < raw_bytes.size(); i=i+42)
					{
						if(raw_bytes[i] == 0xFA && raw_bytes[i+1] == (0xA0 + i / 42)) //&& CRC check
						{
							//good_sets++;
							motor_speed += (raw_bytes[i+3] << 8) + raw_bytes[i+2]; //accumulate count for avg. time increment
							rpms=(raw_bytes[i+3]<<8|raw_bytes[i+2])/10;

							for(uint16_t j = i+4; j < i+40; j=j+6)
							{
								index = 6*(i/42) + (j-4-i)/6;

								// Four bytes per reading
								uint8_t byte0 = raw_bytes[j];
								uint8_t byte1 = raw_bytes[j+1];
								uint8_t byte2 = raw_bytes[j+2];
								uint8_t byte3 = raw_bytes[j+3];

								// Last two bytes represent the uncertanty or intensity, might also be pixel area of target...
								uint16_t intensity = (byte1 << 8) + byte0;
								//fprintf(stderr, "intensity[%d] : %d\n",359-index, intensity);

								// Remaining bits are the range in mm
								uint16_t range = (byte3 << 8) + byte2;

								// scan->ranges[359-index] = range / 1000.0;
								// scan->intensities[359-index] = intensity;
								//printf ("r[%d]=%f\n",359-index, range / 1.0);
								stAngularDistance->r[359-index] = range / 1.0;
								if(range == 0){ //zero -> infinity
									stAngularDistance->r[359-index] = numeric_limits<uint16_t>::max();
								}
								if(intensity < 500 || intensity > 4000){ //filter out distance having inappropriate intensity.
								    stAngularDistance->r[359-index] = FILTERED_DISTANCE;
								} 
							}
						}
					}
					// scan->time_increment = motor_speed/good_sets/1e8;
				}
				else
				{
					start_count = 0;
				}
			}
		}
	}
}


/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_distance_control;
// ##DEFINE_PORT_SECTION::END


/////////////////////////////////////
// init code
/////////////////////////////////////

std::string port("/dev/ttyUSB0");
int baud_rate(230400);
uint16_t rpms;
boost::asio::io_service io; 
STATIC lds::LFCDLaser laser(port, baud_rate, io);

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_distance_control = PORT_INITIALIZE(TASK_ID, "distance_control");
// ##INIT_PORT_SECTION::END
}

/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    
    laser.poll(&stAngularDistance);
    
	/*stDistance.distance contains distance with angle -THETA_MAX ~THETA_MAX .
	 * distance[0]~distance[THETA_MAX ] contains distance with angle 0 ~ -THETA_MAX ,
	 * distance[THETA_MAX +1]~distance[2 * THETA_MAX ] contains distance with angle 1 ~ THETA_MAX
	 *
	 * */
    int i = 0;
    for(i=0;i<=THETA_MAX ; i++){ //0~THETA_MAX
        stDistance.distance[i] = stAngularDistance.r[i];
    }
    for(i=THETA_MAX +1;i<= 2 * THETA_MAX ; i++){ //THETA_MAX+1 ~ 2 * THETA_MAX
        stDistance.distance[i] = stAngularDistance.r[360 + THETA_MAX - i];
    }

	/* filter out distances with angle -15~15, except angle 0
	 * (distance with angle 0 is special for check stop/finish condition.)
	 * */
	for(i=1;i<= 15; i++){ //1~-15
        stDistance.distance[i] = FILTERED_DISTANCE;
    }
	for(i=THETA_MAX +1;i<=THETA_MAX + 15; i++){ //1~15
        stDistance.distance[i] = FILTERED_DISTANCE;
    }

	/*DEBUG code
    for(i=0;i<=2 * THETA_MAX ; i++){
        fprintf(stderr, "distance[%d] sent in LDS_distance.cic : %d\n", i, stDistance.distance[i]);     
    } 
	*/
    BUF_SEND(port_distance_control, (unsigned char *)&stDistance, sizeof(stDistance));
}

/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
