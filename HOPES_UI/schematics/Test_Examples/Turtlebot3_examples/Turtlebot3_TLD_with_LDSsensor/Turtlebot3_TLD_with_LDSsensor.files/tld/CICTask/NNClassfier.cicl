// You SHOULD NOT forget to use the access modifier "static"

#include <vector>
#include "format.h"
#include "TLDUtil.h"

static float thetaFP;
static float thetaTP;
static std::vector<NormalizedPatch>* falsePositives;
static std::vector<NormalizedPatch>* truePositives;

float ncc(float *f1, float *f2)
{
    double corr = 0;
    double norm1 = 0;
    double norm2 = 0;

    int size = TLD_PATCH_SIZE * TLD_PATCH_SIZE;

    for(int i = 0; i < size; i++)
    {
        corr += f1[i] * f2[i];
        norm1 += f1[i] * f1[i];
        norm2 += f2[i] * f2[i];
    }

    // normalization to <0,1>

    return (corr / sqrt(norm1 * norm2) + 1) / 2.0;
}

void NN_release()
{
    falsePositives->clear();
    truePositives->clear();
}

float classifyPatch(NormalizedPatch *patch)
{
    if(truePositives->empty())
    {
        return 0;
    }

    if(falsePositives->empty())
    {
        return 1;
    }

    float ccorr_max_p = 0;

    //Compare patch to positive patches
    for(size_t i = 0; i < truePositives->size(); i++)
    {
        float ccorr = ncc(truePositives->at(i).values, patch->values);

        if(ccorr > ccorr_max_p)
        {
            ccorr_max_p = ccorr;
        }
    }

    float ccorr_max_n = 0;

    //Compare patch to positive patches
    for(size_t i = 0; i < falsePositives->size(); i++)
    {
        float ccorr = ncc(falsePositives->at(i).values, patch->values);

        if(ccorr > ccorr_max_n)
        {
            ccorr_max_n = ccorr;
        }
    }

    float dN = 1 - ccorr_max_n;
    float dP = 1 - ccorr_max_p;

    float distance = dN / (dN + dP);
    return distance;
}

float classifyWindow(const cv::Mat &img, int windowIdx)
{
    NormalizedPatch patch;

    int *bbox = &windows[TLD_WINDOW_SIZE * windowIdx];
    tldExtractNormalizedPatchBB(img, bbox, patch.values);

    return classifyPatch(&patch);
}



LIBFUNC(void, init, void) {
  //.. something to do for initialization
    thetaFP = .5;
    thetaTP = .65;

    truePositives = new std::vector<NormalizedPatch>();
    falsePositives = new std::vector<NormalizedPatch>();
}
 
LIBFUNC(void, wrapup, void) {
    
    NN_release();

    delete truePositives;
    delete falsePositives;
  //.. something to do for finalization
}

LIBFUNC(int, filter, const cv::Mat &img, int windowIdx)
{
    float conf = classifyWindow(img, windowIdx);

    if(conf < thetaTP)
    {
        return false;
    }

    return true;
}

LIBFUNC(void, learn, std::vector<NormalizedPatch> patches)
{
    for(size_t i = 0; i < patches.size(); i++)
    {

        NormalizedPatch patch = patches[i];

        float conf = classifyPatch(&patch);

        if(patch.positive && conf <= thetaTP)
        {
            truePositives->push_back(patch);
        }

        if(!patch.positive && conf >= thetaFP)
        {
            falsePositives->push_back(patch);
        }
    }
}

LIBFUNC(float, classifyBB, cv::Mat &img, cv::Rect *bb)
{
    NormalizedPatch patch;

    tldExtractNormalizedPatchRect(img, bb, patch.values);
    return classifyPatch(&patch);
}
LIBFUNC(float, getThetaTP, void){return thetaTP;}
LIBFUNC(float, getThetaFP, void){return thetaFP;}
