/************************************
 *
 * File : Tra.cic
 * Date : Aug 13, 2015 5:17 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>

#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv2/opencv.hpp>

#include "format.h"
#include "TLDUtil.h"

// ##DEFINE_SECTION::START

#define ELEM_SWAP(a,b) { register float t=(a);(a)=(b);(b)=t; }

// ##DEFINE_SECTION::END



TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_in;
STATIC int port_last_frame;
STATIC int port_out;
// ##DEFINE_PORT_SECTION::END


STATIC CapMat inputMat;
STATIC CapRect inputBB;

STATIC cv::Rect *trackerBB;
STATIC cv::Mat prevMat;
STATIC cv::Mat currMat;
STATIC CapRect prevBB;
STATIC int is_first;


int calculateBBCenter(float bb[4], float center[2]);

/**
 * Creates numM x numN points grid on BBox.
 * Points ordered in 1 dimensional array (x1, y1, x2, y2).
 * @param bb        Bounding box represented through 2 points(x1,y1,x2,y2)
 * @param numM      Number of points in height direction.
 * @param numN      Number of points in width direction.
 * @param margin    margin (in pixel)
 * @param pts       Contains the calculated points in the form (x1, y1, x2, y2).
 *                  Size of the array must be numM * numN * 2.
 */
int getFilledBBPoints(float *bb, int numM, int numN, int margin, float *pts)
{
    int pointDim = 2;
    int i;
    int j;
    /**
     * gap between points in width direction
     */
    float divN;
    /**
     * gap between points in height direction
     */
    float divM;
    float bb_local[4];
    float center[2];
    float spaceN;
    float spaceM;
    /*add margin*/
    bb_local[0] = bb[0] + margin;
    bb_local[1] = bb[1] + margin;
    bb_local[2] = bb[2] - margin;
    bb_local[3] = bb[3] - margin;

    /*  printf("PointArraySize should be: %d\n", numM * numN * pointDim);*/
    /*handle cases numX = 1*/
    if(numN == 1 && numM == 1)
    {
        calculateBBCenter(bb_local, pts);
        return 1;
    }
    else if(numN == 1 && numM > 1)
    {
        divM = numM - 1;
        divN = 2;
        /*maybe save center coordinate into bb[1] instead of loop again*/
        /*calculate step width*/
        spaceM = (bb_local[3] - bb_local[1]) / divM;
        calculateBBCenter(bb_local, center);

        /*calculate points and save them to the array*/
        for(i = 0; i < numN; i++)
        {
            for(j = 0; j < numM; j++)
            {
                pts[i * numM * pointDim + j * pointDim + 0] = center[0];
                pts[i * numM * pointDim + j * pointDim + 1] = bb_local[1] + j * spaceM;
            }
        }

        return 1;
    }
    else if(numN > 1 && numM == 1)
    {
        float center[2];
        float *cen;
        divM = 2;
        divN = numN - 1;
        //maybe save center coordinate into bb[1] instead of loop again
        //calculate step width
        spaceN = (bb_local[2] - bb_local[0]) / divN;
        cen = center;
        calculateBBCenter(bb_local, center);

        //calculate points and save them to the array
        for(i = 0; i < numN; i++)
        {
            for(j = 0; j < numM; j++)
            {
                pts[i * numM * pointDim + j * pointDim + 0] = bb_local[0] + i * spaceN;
                pts[i * numM * pointDim + j * pointDim + 1] = cen[1];
            }
        }

        return 1;
    }
    else if(numN > 1 && numM > 1)
    {
        divM = numM - 1;
        divN = numN - 1;
    }

    //calculate step width
    spaceN = (bb_local[2] - bb_local[0]) / divN;
    spaceM = (bb_local[3] - bb_local[1]) / divM;

    //calculate points and save them to the array
    for(i = 0; i < numN; i++)
    {
        for(j = 0; j < numM; j++)
        {
            pts[i * numM * pointDim + j * pointDim + 0] = bb_local[0] + i * spaceN;
            pts[i * numM * pointDim + j * pointDim + 1] = bb_local[1] + j * spaceM;
        }
    }

    return 1;
}

/**
 * Calculates center of a Rectangle/Boundingbox.
 * @param bb defined with 2 points x,y,x1,y1
 * @param center Output. point center[0]=x,center[1]=y
 * @return 0 if bb is NULL and the center couldn't be computed, 1 on success.
 */
int calculateBBCenter(float bb[4], float center[2])
{
    if(bb == 0)
        return 0;

    center[0] = 0.5 * (bb[0] + bb[2]);
    center[1] = 0.5 * (bb[1] + bb[3]);
    return 1;
}

const int MAX_COUNT = 500;
const int MAX_IMG = 2;
const double N_A_N = -1.0;
/**
 * Size of the search window of each pyramid level in cvCalcOpticalFlowPyrLK.
 */
STATIC int win_size_lk = 4;
STATIC CvPoint2D32f *points[3] = { 0, 0, 0 };
STATIC IplImage **PYR = 0;

/**
 * Calculates euclidean distance between the point pairs.
 * @param point1    Array of points. Pairs with point2 at every Position.
 * @param point2    Array of points. Pairs with point1 at every Position.
 * @param match     Output: Contains the result of the distance calculation.
 *                  Must have the length of nPts.
 * @param nPts      Number of pairs.
 */
void euclideanDistance(CvPoint2D32f *point1, CvPoint2D32f *point2,
                       float *match, int nPts)
{
    int i;

    for(i = 0; i < nPts; i++)
    {
        match[i] = sqrt((point1[i].x - point2[i].x) * (point1[i].x - point2[i].x)
                        + (point1[i].y - point2[i].y) * (point1[i].y - point2[i].y));
    }
}

/**
 * Calculates normalized cross correlation for every point.
 * @param imgI      Image 1.
 * @param imgJ      Image 2.
 * @param points0   Array of points of imgI
 * @param points1   Array of points of imgJ
 * @param nPts      Length of array/number of points.
 * @param status    Switch which point pairs should be calculated.
 *                  if status[i] == 1 => match[i] is calculated.
 *                  else match[i] = 0.0
 * @param match     Output: Array will contain ncc values.
 *                  0.0 if not calculated.
 * @param winsize   Size of quadratic area around the point
 *                  which is compared.
 * @param method    Specifies the way how image regions are compared.
 *                  see cvMatchTemplate
 */
void normCrossCorrelation(IplImage *imgI, IplImage *imgJ,
                          CvPoint2D32f *points0, CvPoint2D32f *points1, int nPts, char *status,
                          float *match, int winsize, int method)
{
    IplImage *rec0 = cvCreateImage(cvSize(winsize, winsize), 8, 1);
    IplImage *rec1 = cvCreateImage(cvSize(winsize, winsize), 8, 1);
    IplImage *res = cvCreateImage(cvSize(1, 1), IPL_DEPTH_32F, 1);

    int i;

    for(i = 0; i < nPts; i++)
    {
        if(status[i] == 1)
        {
            cvGetRectSubPix(imgI, rec0, points0[i]);
            cvGetRectSubPix(imgJ, rec1, points1[i]);
            cvMatchTemplate(rec0, rec1, res, method);
            match[i] = ((float *)(res->imageData))[0];
        }
        else
        {
            match[i] = 0.0;
        }
    }

    cvReleaseImage(&rec0);
    cvReleaseImage(&rec1);
    cvReleaseImage(&res);
}

/**
 * Needed before start of trackLK and at the end of the program for cleanup.
 * Handles PYR(Pyramid cache) variable.
 */
void initImgs()
{
    if(PYR != 0)
    {
        int i;

        for(i = 0; i < MAX_IMG; i++)
        {
            cvReleaseImage(&(PYR[i]));
            PYR[i] = 0;
        }

        free(PYR);
        PYR = 0;
        //printf("LK: deallocated\n");
    }

    PYR = (IplImage **) calloc(MAX_IMG, sizeof(IplImage *));
    //printf("LK: initialized\n");
}

/**
 * Tracks Points from 1.Image to 2.Image.
 * Need initImgs before start and at the end of the program for cleanup.
 *
 * @param imgI      previous Image source. (isn't changed)
 * @param imgJ      actual Image target. (isn't changed)
 * @param ptsI      points to track from first Image.
 *                  Format [0] = x1, [1] = y1, [2] = x2 ...
 * @param nPtsI     number of Points to track from first Image
 * @param ptsJ      container for calculated points of second Image.
 *                  Must have the length of nPtsI.
 * @param nPtsJ     number of Points
 * @param level     Pyramidlevel, default 5
 * @param fb        forward-backward confidence value.
 *                  (corresponds to euclidean distance between).
 *                  Must have the length of nPtsI: nPtsI * sizeof(float).
 * @param ncc       normCrossCorrelation values. needs as inputlength nPtsI * sizeof(float)
 * @param status    Indicates positive tracks. 1 = PosTrack 0 = NegTrack
 *                  needs as inputlength nPtsI * sizeof(char)
 *
 *
 * Based Matlab function:
 * lk(2,imgI,imgJ,ptsI,ptsJ,Level) (Level is optional)
 */

int trackLK(IplImage *imgI, IplImage *imgJ, float ptsI[], int nPtsI,
            float ptsJ[], int nPtsJ, int level, float *fb, float *ncc, char *status)
{
    //TODO: watch NaN cases
    //double nan = std::numeric_limits<double>::quiet_NaN();
    //double inf = std::numeric_limits<double>::infinity();

    // tracking
    int I, J, winsize_ncc;
    CvSize pyr_sz;
    int i;

    //if unused std 5
    if(level == -1)
    {
        level = 5;
    }

    I = 0;
    J = 1;
    winsize_ncc = 10;

    //NOTE: initImgs() must be used correctly or memleak will follow.
    pyr_sz = cvSize(imgI->width + 8, imgI->height / 3);
    PYR[I] = cvCreateImage(pyr_sz, IPL_DEPTH_32F, 1);
    PYR[J] = cvCreateImage(pyr_sz, IPL_DEPTH_32F, 1);

    // Points
    if(nPtsJ != nPtsI)
    {
        printf("Inconsistent input!\n");
        return 0;
    }

    points[0] = (CvPoint2D32f *) malloc(nPtsI * sizeof(CvPoint2D32f)); // template
    points[1] = (CvPoint2D32f *) malloc(nPtsI * sizeof(CvPoint2D32f)); // target
    points[2] = (CvPoint2D32f *) malloc(nPtsI * sizeof(CvPoint2D32f)); // forward-backward
    //TODO:Free
    char *statusBacktrack = (char *) malloc(nPtsI);

    for(i = 0; i < nPtsI; i++)
    {
        points[0][i].x = ptsI[2 * i];
        points[0][i].y = ptsI[2 * i + 1];
        points[1][i].x = ptsJ[2 * i];
        points[1][i].y = ptsJ[2 * i + 1];
        points[2][i].x = ptsI[2 * i];
        points[2][i].y = ptsI[2 * i + 1];
    }
	

    //lucas kanade track
    cvCalcOpticalFlowPyrLK(imgI, imgJ, PYR[I], PYR[J], points[0], points[1], nPtsI, cvSize(win_size_lk, win_size_lk), level, status, 0, cvTermCriteria(CV_TERMCRIT_ITER | CV_TERMCRIT_EPS, 20, 0.03), CV_LKFLOW_INITIAL_GUESSES);

    //backtrack
    cvCalcOpticalFlowPyrLK(imgJ, imgI, PYR[J], PYR[I], points[1], points[2], nPtsI, cvSize(win_size_lk, win_size_lk), level, statusBacktrack, 0, cvTermCriteria(CV_TERMCRIT_ITER | CV_TERMCRIT_EPS, 20, 0.03), CV_LKFLOW_INITIAL_GUESSES | CV_LKFLOW_PYR_A_READY | CV_LKFLOW_PYR_B_READY);

    for(i = 0; i < nPtsI; i++)
    {
        if(status[i] && statusBacktrack[i])
        {
            status[i] = 1;
        }
        else
        {
            status[i] = 0;
        }
    }

    normCrossCorrelation(imgI, imgJ, points[0], points[1], nPtsI, status, ncc,
                         winsize_ncc, CV_TM_CCOEFF_NORMED);
    euclideanDistance(points[0], points[2], fb, nPtsI);

    for(i = 0; i < nPtsI; i++)
    {
        if(status[i] == 1)
        {
            ptsJ[2 * i] = points[1][i].x;
            ptsJ[2 * i + 1] = points[1][i].y;
        }
        else //flow for the corresponding feature hasn't been found
        {
            //Todo: shell realy write N_A_N in it?
            ptsJ[2 * i] = N_A_N;
            ptsJ[2 * i + 1] = N_A_N;
            fb[i] = N_A_N;
            ncc[i] = N_A_N;
        }
    }

    for(i = 0; i < 3; i++)
    {
        free(points[i]);
        points[i] = 0;
    }

    free(statusBacktrack);
    return 1;
}

/**
 * Returns median of the array. Changes array!
 * @param arr the array
 * @pram n length of array
 *
 *  This Quickselect routine is based on the algorithm described in
 *  "Numerical recipes in C", Second Edition,
 *  Cambridge University Press, 1992, Section 8.5, ISBN 0-521-43108-5
 *  This code by Nicolas Devillard - 1998. Public domain.
 */
float getMedianUnmanaged(float arr[], int n)
{
    int low, high;
    int median;
    int middle, ll, hh;

    low = 0;
    high = n - 1;
    median = (low + high) / 2;

    for(;;)
    {
        if(high <= low)  /* One element only */
            return arr[median];

        if(high == low + 1)
        {
            /* Two elements only */
            if(arr[low] > arr[high])
                ELEM_SWAP(arr[low], arr[high]);

            return arr[median];
        }

        /* Find median of low, middle and high items; swap into position low */
        middle = (low + high) / 2;

        if(arr[middle] > arr[high])
            ELEM_SWAP(arr[middle], arr[high]);

        if(arr[low] > arr[high])
            ELEM_SWAP(arr[low], arr[high]);

        if(arr[middle] > arr[low])
            ELEM_SWAP(arr[middle], arr[low]);

        /* Swap low item (now in position middle) into position (low+1) */
        ELEM_SWAP(arr[middle], arr[low + 1]);

        /* Nibble from each end towards middle, swapping items when stuck */
        ll = low + 1;
        hh = high;

        for(;;)
        {
            do
                ll++;

            while(arr[low] > arr[ll]);

            do
                hh--;

            while(arr[hh] > arr[low]);

            if(hh < ll)
                break;

            ELEM_SWAP(arr[ll], arr[hh]);
        }

        /* Swap middle item (in position low) back into correct position */
        ELEM_SWAP(arr[low], arr[hh]);

        /* Re-set active partition */
        if(hh <= median)
            low = ll;

        if(hh >= median)
            high = hh - 1;
    }
}

/**
 * Calculates Median of the array. Don't change array(makes copy).
 * @param arr the array
 * @pram n length of array
 */
float getMedian(float arr[], int n)
{
    float *temP = (float *) malloc(sizeof(float) * n);
    //  int i;
    //  for (i = 0; i < n; i++)
    //  {
    //    temP[i] = arr[i];
    //  }
    memcpy(temP, arr, sizeof(float) * n);
    float median;
    median = getMedianUnmanaged(temP, n);
    free(temP);
    return median;
}

/**
 * Returns width of Boundingbox.
 * @param bb Boundingbox
 */
float getBbWidth(float *bb)
{
    return abs(bb[2] - bb[0] + 1);
}
/**
 * Returns hight of Boundingbox.
 * @param bb Boundingbox
 */
float getBbHeight(float *bb)
{
    return abs(bb[3] - bb[1] + 1);
}
/**
 * Calculates the new (moved and resized) Bounding box.
 * Calculation based on all relative distance changes of all points
 * to every point. Then the Median of the relative Values is used.
 */
int predictbb(float *bb0, CvPoint2D32f *pt0, CvPoint2D32f *pt1, int nPts,
              float *bb1, float *shift)
{
    float *ofx = (float *) malloc(sizeof(float) * nPts);
    float *ofy = (float *) malloc(sizeof(float) * nPts);
    int i;
    int j;
    int d = 0;
    float dx, dy;
    int lenPdist;
    float *dist0;
    float *dist1;
    float s0, s1;

    for(i = 0; i < nPts; i++)
    {
        ofx[i] = pt1[i].x - pt0[i].x;
        ofy[i] = pt1[i].y - pt0[i].y;
    }

    dx = getMedianUnmanaged(ofx, nPts);
    dy = getMedianUnmanaged(ofy, nPts);
    free(ofx);
    ofx = 0;
    free(ofy);
    ofy = 0;
    //m(m-1)/2
    lenPdist = nPts * (nPts - 1) / 2;
    dist0 = (float *) malloc(sizeof(float) * lenPdist);
    dist1 = (float *) malloc(sizeof(float) * lenPdist);

    for(i = 0; i < nPts; i++)
    {
        for(j = i + 1; j < nPts; j++, d++)
        {
            dist0[d]
            = sqrt(pow(pt0[i].x - pt0[j].x, 2) + pow(pt0[i].y - pt0[j].y, 2));
            dist1[d]
            = sqrt(pow(pt1[i].x - pt1[j].x, 2) + pow(pt1[i].y - pt1[j].y, 2));
            dist0[d] = dist1[d] / dist0[d];
        }
    }

    //The scale change is the median of all changes of distance.
    //same as s = median(d2./d1) with above
    *shift = getMedianUnmanaged(dist0, lenPdist);
    free(dist0);
    dist0 = 0;
    free(dist1);
    dist1 = 0;
    s0 = 0.5 * (*shift - 1) * getBbWidth(bb0);
    s1 = 0.5 * (*shift - 1) * getBbHeight(bb0);

    //Apply transformations (translation& scale) to old Bounding Box
    bb1[0] = bb0[0] - s0 + dx;
    bb1[1] = bb0[1] - s1 + dy;
    bb1[2] = bb0[2] + s0 + dx;
    bb1[3] = bb0[3] + s1 + dy;

    //return absolute scale change
    //  shift[0] = s0;
    //  shift[1] = s1;

    return 1;
}


//BB.cpp, BBPredict.cpp, FBTrack.cpp, Lk.cpp, Median.cpp

/**
 * Calculate the bounding box of an Object in a following Image.
 * Imgs aren't changed.
 * @param imgI       Image contain Object with known BoundingBox
 * @param imgJ       Following Image.
 * @param bb         Bounding box of object to track in imgI.
 *                   Format x1,y1,x2,y2
 * @param scaleshift returns relative scale change of bb
 */
int fbtrack(IplImage *imgI, IplImage *imgJ, float *bb, float *bbnew,
            float *scaleshift)
{
    char level = 5;
    const int numM = 10;
    const int numN = 10;
    const int nPoints = numM * numN;
    const int sizePointsArray = nPoints * 2;

    float fb[nPoints];
    float ncc[nPoints];
    char status[nPoints];

    float pt[sizePointsArray];
    float ptTracked[sizePointsArray];
    int nlkPoints;
    CvPoint2D32f *startPoints;
    CvPoint2D32f *targetPoints;
    float *fbLkCleaned;
    float *nccLkCleaned;
    int i, M;
    int nRealPoints;
    float medFb;
    float medNcc;
    int nAfterFbUsage;
    getFilledBBPoints(bb, numM, numN, 5, pt);
    //getFilledBBPoints(bb, numM, numN, 5, &ptTracked);
    memcpy(ptTracked, pt, sizeof(float) * sizePointsArray);

    initImgs();
    trackLK(imgI, imgJ, pt, nPoints, ptTracked, nPoints, level, fb, ncc, status);
    initImgs();
    //  char* status = *statusP;
    nlkPoints = 0;

    for(i = 0; i < nPoints; i++)
    {
        nlkPoints += status[i];
    }

    startPoints = (CvPoint2D32f *) malloc(nlkPoints * sizeof(CvPoint2D32f));
    targetPoints = (CvPoint2D32f *) malloc(nlkPoints * sizeof(CvPoint2D32f));
    fbLkCleaned = (float *) malloc(nlkPoints * sizeof(float));
    nccLkCleaned = (float *) malloc(nlkPoints * sizeof(float));

    M = 2;
    nRealPoints = 0;

    for(i = 0; i < nPoints; i++)
    {
        //TODO:handle Missing Points
        //or status[i]==0
        if(ptTracked[M * i] == -1)
        {
        }
        else
        {
            startPoints[nRealPoints].x = pt[2 * i];
            startPoints[nRealPoints].y = pt[2 * i + 1];
            targetPoints[nRealPoints].x = ptTracked[2 * i];
            targetPoints[nRealPoints].y = ptTracked[2 * i + 1];
            fbLkCleaned[nRealPoints] = fb[i];
            nccLkCleaned[nRealPoints] = ncc[i];
            nRealPoints++;
        }
    }

    //assert nRealPoints==nlkPoints
    medFb = getMedian(fbLkCleaned, nlkPoints);
    medNcc = getMedian(nccLkCleaned, nlkPoints);
    /*  printf("medianfb: %f\nmedianncc: %f\n", medFb, medNcc);
     printf("Number of points after lk: %d\n", nlkPoints);*/
    nAfterFbUsage = 0;

    for(i = 0; i < nlkPoints; i++)
    {
        if((fbLkCleaned[i] <= medFb) & (nccLkCleaned[i] >= medNcc))
        {
            startPoints[nAfterFbUsage] = startPoints[i];
            targetPoints[nAfterFbUsage] = targetPoints[i];
            nAfterFbUsage++;
        }
    }

    //printf("Number of points after fb correction: %d\n", nAfterFbUsage);
	//showIplImage(IMGS[1]);
    // show "OpticalFlow" fb filtered.
    //drawLinesCvPoint2D32f(imgI, startPoints, nRealPoints, targetPoints, nRealPoints);
	//showIplImage(imgI);

    predictbb(bb, startPoints, targetPoints, nAfterFbUsage, bbnew, scaleshift);
    /*printf("bbnew: %f,%f,%f,%f\n", bbnew[0], bbnew[1], bbnew[2], bbnew[3]);
     printf("relative scale: %f \n", scaleshift[0]);*/
    //show picture with tracked bb
    //  drawRectFromBB(imgJ, bbnew);
    //  showIplImage(imgJ);
    free(startPoints);
    free(targetPoints);
    free(fbLkCleaned);
    free(nccLkCleaned);
#ifdef CAP_DEBUG_R
	printf("Tracker Result : nlkPoints - %d, medFb - %f\n", nlkPoints, medFb);
#endif
    if(medFb > 10) return 0;
	else return 1;

}

STATIC TrackerResult trackerResult;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in = PORT_INITIALIZE(TASK_ID, "in");
    port_last_frame = PORT_INITIALIZE(TASK_ID, "last_frame");
    port_out = PORT_INITIALIZE(TASK_ID, "out");
// ##INIT_PORT_SECTION::END
    trackerBB = NULL;
    prevMat = cv::Scalar(3);
    // TODO: task initialize code

}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{

    // TODO: task main code
    // Estimates motion of bounding box BB1 from frame I to frame J

	MQ_RECEIVE(port_in, (unsigned char*)&inputMat, sizeof(CapMat));
    MQ_RECEIVE(port_last_frame, (unsigned char*)&prevBB, sizeof(CapRect));

#ifdef CAP_DEBUG
    printf("Tracker_Go function _ MQ_RECEIVE  succeed\n");
	struct timespec start, end;
	clock_gettime(CLOCK_MONOTONIC,&start);
#endif

	currMat = cv::Mat(imgHeight,imgWidth,CV_8UC1, inputMat.data);
       
    if(trackerBB!=NULL) delete trackerBB;
	trackerBB = NULL;
    
	if(prevBB.valid)
	{
		//debug session
		//Input : prev Data
		/*
		cv::Mat prevShow = prevMat.clone();
		cv::rectangle(prevShow, prevBB.value, CV_RGB(255,0,0),3);
		imshow("Input", prevShow);
		cv::waitKey(1000);
		imshow("Input", currMat);
		cv::waitKey(1000);
*/
		if(prevBB.value.width <= 0 || prevBB.value.height<= 0)
		{
		}
		else
		{
			float bb_tracker[] = {prevBB.value.x, prevBB.value.y, prevBB.value.width + prevBB.value.x - 1, prevBB.value.height + prevBB.value.y - 1};
			float scale;

			IplImage prevImg = prevMat;
			IplImage currImg = currMat;

			int success = fbtrack(&prevImg, &currImg, bb_tracker, bb_tracker, &scale);

#ifdef CAP_DEBUG_R
			printf("tracker_success? %d\n",success);
#endif
			//Extract subimage
			float x, y, w, h;
			x = floor(bb_tracker[0] + 0.5);
			y = floor(bb_tracker[1] + 0.5);
			w = floor(bb_tracker[2] - bb_tracker[0] + 1 + 0.5);
			h = floor(bb_tracker[3] - bb_tracker[1] + 1 + 0.5);

			//TODO: Introduce a check for a minimum size
			if(!success || x < 0 || y < 0 || w <= 0 || h <= 0 || x + w > currMat.cols || y + h > currMat.rows || x != x || y != y || w != w || h != h) //x!=x is check for nan
			{
				//Leave it empty
			}
			else
			{
				trackerBB = new cv::Rect(x, y, w, h);
			}
		}
	}
    
    prevMat = currMat.clone();
    trackerResult.mat = inputMat;
		
    if(trackerBB != NULL){
		trackerResult.BB.valid =  1; 
		trackerResult.BB.value = *trackerBB;

#ifdef CAP_DEBUG_R
		printf("\nTracker Result - x, y, w, h = %d %d %d %d\n", trackerResult.BB.value.x, trackerResult.BB.value.y, trackerResult.BB.value.width, trackerResult.BB.value.height);
#endif

	}
	else
	{
		trackerResult.BB.valid = 0;
		trackerResult.BB.value = cv::Rect();
	}
    
#ifdef CAP_DEBUG
	clock_gettime(CLOCK_MONOTONIC,&end);
	uint64_t diff = BILLION * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
    printf("Tracker END - time spent : %llu\n", (long long unsigned int) diff / 1000);
#endif
    MQ_SEND(port_out, (unsigned char*)&trackerResult, sizeof(TrackerResult));

    // initialize output variables
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
