/************************************
 *
 * File : Ve.cic
 * Date : Oct 30, 2013 4:10 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <stdio.h>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_in1;
STATIC int port_in2;
STATIC int port_out;
// ##DEFINE_PORT_SECTION::END
static int nChannelSize = 0;


/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in1 = PORT_INITIALIZE(TASK_ID, "in1");
    port_in2 = PORT_INITIALIZE(TASK_ID, "in2");
    port_out = PORT_INITIALIZE(TASK_ID, "out");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    nChannelSize = UFPort_GetChannelSize(port_out);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    uint32_t vecA[3];
    uint32_t vecB[3];
    uint32_t val=0;
    int i;
    int nDataSize;
    uem_result result;

    result = UFPort_GetNumOfAvailableData(port_in1, 0, &nDataSize);
    if(result != ERR_UEM_NOERROR) return;
    if(nDataSize < sizeof(uint32_t)*3) return;

    result = UFPort_GetNumOfAvailableData(port_in2, 0, &nDataSize);
    if(result != ERR_UEM_NOERROR) return;
    if(nDataSize < sizeof(uint32_t)*3) return;

    result = UFPort_GetNumOfAvailableData(port_out, 0, &nDataSize);
    if(result != ERR_UEM_NOERROR) return;
    if(nDataSize + sizeof(uint32_t) > nChannelSize) return;

    MQ_RECEIVE(port_in1, (unsigned char*) vecA, sizeof(uint32_t)*3);
    MQ_RECEIVE(port_in2, (unsigned char*) vecB, sizeof(uint32_t)*3);

    for (i=0 ; i<3 ; i++){
        val += (uint32_t)(vecA[i]*vecB[i]);
       
    }
  
    MQ_SEND(port_out, (unsigned char*) &val, sizeof(uint32_t));
    

}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
