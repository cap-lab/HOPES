/************************************
 *
 * File : DeQ.cic
 * Date : Sep 18, 2012 1:46 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <math.h>
#include "mp3_struct.h"

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_input;
STATIC int port_output;
// ##DEFINE_PORT_SECTION::END


/////////////////////////////////////
// internal variables
/////////////////////////////////////


struct  {
    int l[23];
    int s[14];} sfBandIndex_44[6] =
{{{0,6,12,18,24,30,36,44,54,66,80,96,116,140,168,200,238,284,336,396,464,522,576},
    {0,4,8,12,18,24,32,42,56,74,100,132,174,192}},
{{0,6,12,18,24,30,36,44,54,66,80,96,114,136,162,194,232,278,330,394,464,540,576},
    {0,4,8,12,18,26,36,48,62,80,104,136,180,192}},
{{0,6,12,18,24,30,36,44,54,66,80,96,116,140,168,200,238,284,336,396,464,522,576},
    {0,4,8,12,18,26,36,48,62,80,104,134,174,192}},

{{0,4,8,12,16,20,24,30,36,44,52,62,74,90,110,134,162,196,238,288,342,418,576},
    {0,4,8,12,16,22,30,40,52,66,84,106,136,192}},
{{0,4,8,12,16,20,24,30,36,42,50,60,72,88,106,128,156,190,230,276,330,384,576},
    {0,4,8,12,16,22,28,38,50,64,80,100,126,192}},
{{0,4,8,12,16,20,24,30,36,44,54,66,82,102,126,156,194,240,296,364,448,550,576},
    {0,4,8,12,16,22,30,42,58,78,104,138,180,192}}};

static int pretab[22] = {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,3,3,2,0};

static void III_dequantize_sample(
    long int             is[SBLIMIT][SSLIMIT],
    REAL                 xr[SBLIMIT][SSLIMIT],
    III_scalefac_t      *scalefac,
    gr_info_s           *gr_info,
    int                  ch,
    frame_params        *fr_ps)
{
    int                 ss, sb, cb = 0, sfreq;
    int                 next_cb_boundary, cb_begin = 0, cb_width = 0;
#ifdef OPTIMIZE
    static REAL         globalGain;
    static int          lastGlobalGain = -1;

/* A pow(2, n) cache, where n = [-16..5] step 0.25 */
#define POW2CACHENEG (16*4)             /* # of cached numbers for n < 0   */
#define POW2CACHEPOS (5*4)              /* # of cached numbers for n > 0   */
static REAL pow2[POW2CACHENEG+POW2CACHEPOS+1] = { /* n < 0 + n > 0 + n = 0 */
/* <<n>>    <<pow(2,n)>> */
/*-16.00*/  0.00001526,  0.00001815,  0.00002158,  0.00002566,  0.00003052,
/*-14.75*/  0.00003629,  0.00004316,  0.00005132,  0.00006104,  0.00007258,
/*-13.50*/  0.00008632,  0.00010265,  0.00012207,  0.00014517,  0.00017263,
/*-12.25*/  0.00020530,  0.00024414,  0.00029033,  0.00034527,  0.00041059,
/*-11.00*/  0.00048828,  0.00058067,  0.00069053,  0.00082119,  0.00097656,
/* -9.75*/  0.00116134,  0.00138107,  0.00164238,  0.00195312,  0.00232267,
/* -8.50*/  0.00276214,  0.00328475,  0.00390625,  0.00464534,  0.00552427,
/* -7.25*/  0.00656950,  0.00781250,  0.00929068,  0.01104854,  0.01313901,
/* -6.00*/  0.01562500,  0.01858136,  0.02209709,  0.02627801,  0.03125000,
/* -4.75*/  0.03716272,  0.04419417,  0.05255603,  0.06250000,  0.07432544,
/* -3.50*/  0.08838835,  0.10511205,  0.12500000,  0.14865089,  0.17677670,
/* -2.25*/  0.21022410,  0.25000000,  0.29730178,  0.35355339,  0.42044821,
/* -1.00*/  0.50000000,  0.59460356,  0.70710678,  0.84089642,  1.00000000,
/*  0.25*/  1.18920712,  1.41421356,  1.68179283,  2.00000000,  2.37841423,
/*  1.50*/  2.82842712,  3.36358566,  4.00000000,  4.75682846,  5.65685425,
/*  2.75*/  6.72717132,  8.00000000,  9.51365692, 11.31370850, 13.45434264,
/*  4.00*/ 16.00000000, 19.02731384, 22.62741700, 26.90868529, 32.00000000
};

    /* Skip calculation unless value has changed */
    if (gr_info->global_gain != lastGlobalGain) {

        /* Compute overall (global) scaling */

        /* All vars are integers -> required accuracy = 0.25 */
        int n = gr_info->global_gain - 210;
        if (n >= -POW2CACHENEG && n <= POW2CACHEPOS)
            globalGain = pow2[n + POW2CACHENEG];      /* pow2[60] = 2^0 = 1 */
        else {
            globalGain = pow(2.0, (float)n * 0.25);
            /*fprintf(stderr, "pow(2,n)[1] miss, n=%4.2f\n", (float)n * 0.25);*/
        }
        /* Original calculation */
        /* globalGain = pow(2.0, 0.25 * (gr_info->global_gain - 210.0)); */

        lastGlobalGain = gr_info->global_gain;
    }

    sfreq = fr_ps->header.sampling_frequency + (fr_ps->header.version * 3);

    /* Choose correct scalefactor band per block type, initalize boundary */

    if (gr_info->window_switching_flag && (gr_info->block_type == 2))
        if (gr_info->mixed_block_flag)
            next_cb_boundary=sfBandIndex_44[sfreq].l[1];   /* LONG blocks: 0,1,3 */
        else {
            next_cb_boundary=sfBandIndex_44[sfreq].s[1]*3; /* Pure SHORT block */
            cb_width = sfBandIndex_44[sfreq].s[1];
            cb_begin = 0;
        } else
            next_cb_boundary=sfBandIndex_44[sfreq].l[1];   /* LONG blocks: 0,1,3 */

    /* Apply formula per block type */

    for (sb = 0 ; sb < SBLIMIT ; sb++) {        /* 32 */
        for (ss = 0 ; ss < SSLIMIT ; ss++) {    /* 18 */

            int         insample;
            REAL        outsample;

            if ((sb * 18) + ss == next_cb_boundary) {
                /* Adjust critical band boundary */

                if (gr_info->window_switching_flag &&
                                        (gr_info->block_type == 2)) {
                    if (gr_info->mixed_block_flag)  {
                        if (((sb * 18) + ss) == sfBandIndex_44[sfreq].l[8]) {
                            next_cb_boundary=sfBandIndex_44[sfreq].s[4] * 3;
                            cb = 3;
                            cb_width = sfBandIndex_44[sfreq].s[cb+1] -
                                        sfBandIndex_44[sfreq].s[cb];
                            cb_begin = sfBandIndex_44[sfreq].s[cb] * 3;
                        } else if (((sb * 18) + ss) < sfBandIndex_44[sfreq].l[8])
                            next_cb_boundary = sfBandIndex_44[sfreq].l[(++cb) + 1];
                        else {
                            next_cb_boundary =
                                        sfBandIndex_44[sfreq].s[(++cb) + 1] * 3;
                            cb_width = sfBandIndex_44[sfreq].s[cb + 1] -
                                        sfBandIndex_44[sfreq].s[cb];
                            cb_begin = sfBandIndex_44[sfreq].s[cb] * 3;
                        }
                    } else {
                        next_cb_boundary = sfBandIndex_44[sfreq].s[(++cb) + 1] * 3;
                        cb_width = sfBandIndex_44[sfreq].s[cb+1] -
                                        sfBandIndex_44[sfreq].s[cb];
                        cb_begin = sfBandIndex_44[sfreq].s[cb]*3;
                    }

                } else /* long blocks */

                    next_cb_boundary = sfBandIndex_44[sfreq].l[(++cb) + 1];
            }

            /* Do long/short dependent scaling operations */

            /* Initialize to overall (global) scaling */
            outsample = globalGain;

            if (gr_info->window_switching_flag && (
                        ((gr_info->block_type == 2) &&
                        (gr_info->mixed_block_flag == 0)) ||
                        ((gr_info->block_type == 2) &&
                        gr_info->mixed_block_flag && (sb >= 2)) )) {

                /* All vars are integers -> required accuracy = 2 */
                /* Ending expression = 1 should return pow(2, -2) */
                int n = 4 * (-2 * gr_info->subblock_gain[(((sb * 18) + ss) -
                                cb_begin) / cb_width]);

                if (n >= -POW2CACHENEG && n <= POW2CACHEPOS)
                    outsample *= pow2[n + POW2CACHENEG];
                else {
                    outsample *= pow(2.0, (float)n * 0.25);
                    /*fprintf(stderr, "pow(2,n)[2] miss, n=%4.2f\n", n*0.25);*/
                }

                /* All vars are integers -> required accuracy = 0.5 */
                /* Ending expression = 1 should return pow(2, -0.5) */
                n = (int)-2 * ((1.0 + gr_info->scalefac_scale) *
                     (*scalefac)[ch].s[(((sb * 18) + ss) -
                     cb_begin) / cb_width][cb]);

                if (n >= -POW2CACHENEG && n <= POW2CACHEPOS)
                    outsample *= pow2[n + POW2CACHENEG];
                else {
                    outsample *= pow(2.0, (float)n * 0.25);
                    /*fprintf(stderr, "pow(2,n)[3] miss, n=%4.2f\n", n*0.25);*/
                }

            } else {    /* LONG block types 0,1,3 & */
                        /* 1st 2 subbands of switched blocks */

                /* All vars are integers -> required accuracy = 0.5 */
                /* Ending expression = 1 should return pow(2, -0.5) */
                int n = (int)-2 * ((1.0 + gr_info->scalefac_scale) *
                     ((*scalefac)[ch].l[cb] +
                     gr_info->preflag * pretab[cb]));

                if (n >= -POW2CACHENEG && n <= POW2CACHEPOS)
                    outsample *= pow2[n + POW2CACHENEG];
                else {
                    if (n > -1000) {
                        outsample *= pow(2.0, (float)n * 0.5);
                        /* fprintf(stderr, "pow(2,n)[4] miss, n=%4.2f\n", */
                        /*      (float)n  -0.5); */
                    } else
                        /* Bug in the implementation here? x sometimes */
                        /* underflows like -2009044012. Then mute. */
                        outsample = 0.0;
                }
            }

            /* Scale quantized value */
            insample = is[sb][ss];              /* read input array once */
            if (insample == 0)
                outsample = 0.0;                /* optimize no input */
            else {

/* A pow(n, 4/3) cache, where n = [1..100] step 1 */
#define POWCACHED 100   /* biggest number that is cached */
static REAL powc[POWCACHED] = {
/* 1.00*/   1.00000000,   2.51984210,   4.32674871,   6.34960421,   8.54987973,
/* 6.00*/  10.90272356,  13.39051828,  16.00000000,  18.72075441,  21.54434690,
/*11.00*/  24.46378100,  27.47314182,  30.56735094,  33.74199170,  36.99318111,
/*16.00*/  40.31747360,  43.71178704,  47.17334510,  50.69963133,  54.28835233,
/*21.00*/  57.93740770,  61.64486527,  65.40894054,  69.22797937,  73.10044346,
/*26.00*/  77.02489778,  81.00000000,  85.02449121,  89.09718794,  93.21697518,
/*31.00*/  97.38280022, 101.59366733, 105.84863289, 110.14680124, 114.48732086,
/*36.00*/ 118.86938096, 123.29220851, 127.75506546, 132.25724628, 136.79807573,
/*41.00*/ 141.37690686, 145.99311909, 150.64611660, 155.33532675, 160.06019870,
/*46.00*/ 164.82020207, 169.61482577, 174.44357691, 179.30597979, 184.20157493,
/*51.00*/ 189.12991823, 194.09058015, 199.08314497, 204.10721008, 209.16238534,
/*56.00*/ 214.24829247, 219.36456448, 224.51084516, 229.68678854, 234.89205847,
/*61.00*/ 240.12632817, 245.38927980, 250.68060410, 256.00000000, 261.34717431,
/*66.00*/ 266.72184136, 272.12372273, 277.55254693, 283.00804915, 288.48997099,
/*71.00*/ 293.99806021, 299.53207052, 305.09176134, 310.67689758, 316.28724949,
/*76.00*/ 321.92259240, 327.58270661, 333.26737717, 338.97639374, 344.70955041,
/*81.00*/ 350.46664558, 356.24748183, 362.05186573, 367.87960775, 373.73052213,
/*86.00*/ 379.60442677, 385.50114309, 391.42049594, 397.36231351, 403.32642719,
/*91.00*/ 409.31267152, 415.32088406, 421.35090534, 427.40257871, 433.47575036,
/*96.00*/ 439.57026914, 445.68598654, 451.82275662, 457.98043591, 464.15888336
};
                int absSample = abs(insample);

                if (absSample <= POWCACHED)
                    outsample *= powc[absSample - 1];
                else
                    outsample *= pow(absSample, 4.0/3.0);
                if (insample < 0)
                    outsample = -outsample;     /* change the sign */
            }
            xr[sb][ss] = outsample;             /* touch output array once */
        }
    }

#else
    /* Original code */

    int         sign;

    sfreq = fr_ps->header.sampling_frequency + (fr_ps->header.version * 3);

    /* Choose correct scalefactor band per block type, initalize boundary */

    if (gr_info->window_switching_flag && (gr_info->block_type == 2))
        if (gr_info->mixed_block_flag)
            next_cb_boundary=sfBandIndex_44[sfreq].l[1];   /* LONG blocks: 0,1,3 */
        else {
            next_cb_boundary=sfBandIndex_44[sfreq].s[1]*3; /* Pure SHORT block */
            cb_width = sfBandIndex_44[sfreq].s[1];
            cb_begin = 0;
        } else
            next_cb_boundary=sfBandIndex_44[sfreq].l[1];   /* LONG blocks: 0,1,3 */
    /* Apply formula per block type */

    for (sb = 0 ; sb < SBLIMIT ; sb++) {
        for (ss = 0 ; ss < SSLIMIT ; ss++) {
            if ((sb*18) + ss == next_cb_boundary) {
                /* Adjust critical band boundary */

                if (gr_info->window_switching_flag &&
                                        (gr_info->block_type == 2)) {
                    if (gr_info->mixed_block_flag)  {
                        if (((sb*18)+ss) == sfBandIndex_44[sfreq].l[8]) {
                            next_cb_boundary=sfBandIndex_44[sfreq].s[4]*3;
                            cb = 3;
                            cb_width = sfBandIndex_44[sfreq].s[cb+1] -
                                        sfBandIndex_44[sfreq].s[cb];
                            cb_begin = sfBandIndex_44[sfreq].s[cb]*3;
                        } else if (((sb*18)+ss) < sfBandIndex_44[sfreq].l[8])
                            next_cb_boundary = sfBandIndex_44[sfreq].l[(++cb)+1];
                        else {
                            next_cb_boundary = sfBandIndex_44[sfreq].s[(++cb)+1]*3;
                            cb_width = sfBandIndex_44[sfreq].s[cb+1] -
                                        sfBandIndex_44[sfreq].s[cb];
                            cb_begin = sfBandIndex_44[sfreq].s[cb]*3;
                        }
                    } else {
                        next_cb_boundary = sfBandIndex_44[sfreq].s[(++cb)+1]*3;
                        cb_width = sfBandIndex_44[sfreq].s[cb+1] -
                                        sfBandIndex_44[sfreq].s[cb];
                        cb_begin = sfBandIndex_44[sfreq].s[cb]*3;
                    }

                } else /* long blocks */

                    next_cb_boundary = sfBandIndex_44[sfreq].l[(++cb)+1];
            }

            /* Compute overall (global) scaling */

            xr[sb][ss] = pow(2.0, (0.25 * (gr_info->global_gain - 210.0)));

            /* Do long/short dependent scaling operations */

            if (gr_info->window_switching_flag && (
                        ((gr_info->block_type == 2) &&
                        (gr_info->mixed_block_flag == 0)) ||
                        ((gr_info->block_type == 2) &&
                        gr_info->mixed_block_flag && (sb >= 2)) )) {

                xr[sb][ss] *= pow(2.0, 0.25 * -8.0 * gr_info->subblock_gain[
                                (((sb*18)+ss) - cb_begin)/cb_width]);

                xr[sb][ss] *= pow(2.0, 0.25 * -2.0 *
                        (1.0+gr_info->scalefac_scale) *
                        (*scalefac)[ch].s[(((sb*18)+ss) -
                        cb_begin)/cb_width][cb]);

            } else {    /* LONG block types 0,1,3 & */
                        /* 1st 2 subbands of switched blocks */

                xr[sb][ss] *= pow(2.0, -0.5 * (1.0+gr_info->scalefac_scale)
                                        * ((*scalefac)[ch].l[cb]
                                        + gr_info->preflag * pretab[cb]));
            }

            /* Scale quantized value */
            sign = (is[sb][ss]<0) ? 1 : 0;
            xr[sb][ss] *= pow(abs(is[sb][ss]), 4.0/3.0);
            if (sign)
                xr[sb][ss] = -xr[sb][ss];
        }
    }
#endif /* OPTIMIZE */
}

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_input = PORT_INITIALIZE(TASK_ID, "input");
    port_output = PORT_INITIALIZE(TASK_ID, "output");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code

}


/////////////////////////////////////
// go code
/////////////////////////////////////
STATIC Packet1 inPacket;
STATIC Packet3 outPacket;
TASK_GO
{
    // TODO: task main code
    MQ_RECEIVE(port_input, (unsigned char*)&inPacket, sizeof(Packet1));
    if ( inPacket.frameHeader.stereo == 2 || inPacket.channel == 0 )
        III_dequantize_sample(inPacket.output.data, outPacket.output.data, &inPacket.scaleFactor, 
									&inPacket.groupInformation, inPacket.channel, &inPacket.frameHeader);

	memcpy(&outPacket.groupInformation, &inPacket.groupInformation, sizeof(gr_info_s));
    memcpy(&outPacket.channel, &inPacket.channel, sizeof(int)); 
 
    memcpy(&outPacket.scaleFactor, &inPacket.scaleFactor, sizeof(III_scalefac_t)); 
    memcpy(&outPacket.frameHeader, &inPacket.frameHeader, sizeof(frame_params));

    MQ_SEND(port_output, (unsigned char*)&outPacket, sizeof(Packet3));
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
}

TASK_CODE_END
