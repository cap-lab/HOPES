/************************************
 *
 * File : tnr.cic
 * Date : Apr 5, 2022 8:10 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <opencv2/imgcodecs.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include <vpi/OpenCVInterop.hpp>
#include <vpi/Image.h>
#include <vpi/Status.h>
#include <vpi/Stream.h>
#include <vpi/algo/ConvertImageFormat.h>
#include <vpi/algo/TemporalNoiseReduction.h>

#include <algorithm>
#include <cstring>
#include <fstream>
#include <iostream>
#include <map>
#include <vector>
#include <sstream>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////
#define WIDTH 256
#define HEIGHT 256
// ##DEFINE_PORT_SECTION::START
STATIC int port_in;
STATIC int port_out;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////
STATIC VPIStream img1_stream     = NULL;
STATIC int curFrame = 0;
STATIC VPIImage imgPrevious = NULL, imgCurrent = NULL, imgOutput = NULL;
STATIC VPIPayload tnr    = NULL;
STATIC VPIBackend backend = VPI_BACKEND_CUDA;

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in = PORT_INITIALIZE(TASK_ID, "in");
    port_out = PORT_INITIALIZE(TASK_ID, "out");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    vpiImageCreate(WIDTH, HEIGHT, VPI_IMAGE_FORMAT_NV12_ER, 0, &imgPrevious);
    vpiImageCreate(WIDTH, HEIGHT, VPI_IMAGE_FORMAT_NV12_ER, 0, &imgCurrent);
    vpiImageCreate(WIDTH, HEIGHT, VPI_IMAGE_FORMAT_NV12_ER, 0, &imgOutput);
    vpiStreamCreate(0, &img1_stream);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    MQ_RECEIVE(port_in, (unsigned char*)&imgCurrent, sizeof(VPIImage));
     
     vpiCreateTemporalNoiseReduction(backend, WIDTH, HEIGHT, VPI_IMAGE_FORMAT_NV12_ER, VPI_TNR_DEFAULT, VPI_TNR_PRESET_OUTDOOR_MEDIUM_LIGHT, 0.5, &tnr);
  
    // Apply temporal noise reduction
    // For first frame, we have to pass NULL as previous frame, this will reset internal state.
    vpiSubmitTemporalNoiseReduction(img1_stream, 0, tnr, curFrame == 1 ? NULL : imgPrevious, imgCurrent, imgOutput);
    vpiStreamSync(img1_stream);
    
    // Destroy tnr for iteration
    vpiPayloadDestroy(tnr);

    MQ_SEND(port_out, (unsigned char*)&imgOutput, sizeof(VPIImage));
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    vpiImageDestroy(imgPrevious);
    vpiImageDestroy(imgCurrent);
    vpiStreamDestroy(img1_stream);
}

TASK_CODE_END
