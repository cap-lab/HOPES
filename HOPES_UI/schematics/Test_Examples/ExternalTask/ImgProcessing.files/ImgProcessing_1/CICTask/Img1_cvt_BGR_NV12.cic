/************************************
 *
 * File : convert.cic
 * Date : Apr 5, 2022 1:47 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <opencv2/imgcodecs.hpp>

#include <vpi/OpenCVInterop.hpp>
#include <vpi/Image.h>
#include <vpi/Status.h>
#include <vpi/Stream.h>
#include <vpi/algo/ConvertImageFormat.h>
#include <vpi/algo/Rescale.h>

#include <cstring>
#include <iostream>
#include <sstream>
// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////
#define WIDTH 128
#define HEIGHT 128
#define IMG_SIZE (WIDTH*HEIGHT*3)
// ##DEFINE_PORT_SECTION::START
STATIC int port_in;
STATIC int port_out1;
STATIC int port_out2;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////
STATIC VPIImage image       = NULL;
STATIC VPIImage imageNV12   = NULL;
STATIC VPIStream img1_stream     = NULL;
STATIC VPIBackend backend = VPI_BACKEND_CPU;
STATIC char* srcData;

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_in = PORT_INITIALIZE(TASK_ID, "in");
    port_out1 = PORT_INITIALIZE(TASK_ID, "out1");
    port_out2 = PORT_INITIALIZE(TASK_ID, "out2");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    srcData = (char*)malloc(IMG_SIZE);
    
    vpiStreamCreate(0, &img1_stream);
            
    // Create a temporary image to hold the input converted to NV12.
    vpiImageCreate(WIDTH, HEIGHT, VPI_IMAGE_FORMAT_NV12_ER, 0, &imageNV12);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    MQ_RECEIVE(port_in, (unsigned char*)srcData, IMG_SIZE);

    cv::Mat cvImage(HEIGHT, WIDTH, CV_8UC3, srcData);
    
    if(image == NULL) {
        // Wrap the loaded image into a VPIImage object
        vpiImageCreateOpenCVMatWrapper(cvImage, 0, &image);
    }
    else {
        vpiImageSetWrappedOpenCVMat(image, cvImage);
    }
    
    // Convert input from BGR8 to NV12
    vpiSubmitConvertImageFormat(img1_stream, backend, image, imageNV12, NULL);
    
    vpiStreamSync(img1_stream);
    
    MQ_SEND(port_out1, (unsigned char*) &imageNV12, sizeof(VPIImage));
    MQ_SEND(port_out2, (unsigned char*) &imageNV12, sizeof(VPIImage));
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    vpiImageDestroy(image);
    free(srcData);
    vpiStreamDestroy(img1_stream);
}

TASK_CODE_END
