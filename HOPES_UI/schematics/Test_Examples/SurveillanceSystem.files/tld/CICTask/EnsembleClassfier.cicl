// You SHOULD NOT forget to use the access modifier "static"
#include "TLDUtil.h"
#include <cstdlib>
#include <cmath>
#include "format.h"

static    int *featureOffsets;
static    float *features;

static    int numIndices;

static    float *posteriors;
static    int *positives;
static    int *negatives;

static const unsigned char *img;

void initFeatureLocations()
{
    int size = 2 * 2 * numFeatures * numTrees;

    features = new float[size];
	srand(1);
    for(int i = 0; i < size; i++)
    {
        features[i] = rand() / (float)RAND_MAX;
    }
}

void initFeatureOffsets()
{

    featureOffsets = new int[numScales * numTrees * numFeatures * 2];
    int *off = featureOffsets;

    for(int k = 0; k < numScales; k++)
    {
        cv::Size scale = scales[k];

        for(int i = 0; i < numTrees; i++)
        {
            for(int j = 0; j < numFeatures; j++)
            {

                float *currentFeature  = features + (4 * numFeatures) * i + 4 * j;
                *off++ = sub2idx((scale.width - 1) * currentFeature[0] + 1, (scale.height - 1) * currentFeature[1] + 1, imgWidthStep); //We add +1 because the index of the bounding box points to x-1, y-1
                *off++ = sub2idx((scale.width - 1) * currentFeature[2] + 1, (scale.height - 1) * currentFeature[3] + 1, imgWidthStep);
            }
        }
    }
}

void initPosteriors()
{
    posteriors = new float[numTrees * numIndices];
    positives = new int[numTrees * numIndices];
    negatives = new int[numTrees * numIndices];

    for(int i = 0; i < numTrees; i++)
    {
        for(int j = 0; j < numIndices; j++)
        {
            posteriors[i * numIndices + j] = 0;
            positives[i * numIndices + j] = 0;
            negatives[i * numIndices + j] = 0;
        }
    }
}

int calcFernFeature(int windowIdx, int treeIdx)
{

    int index = 0;
    int *bbox = windowOffsets + windowIdx * TLD_WINDOW_OFFSET_SIZE;
    int *off = featureOffsets + bbox[4] + treeIdx * 2 * numFeatures; //bbox[4] is pointer to features for the current scale

    for(int i = 0; i < numFeatures; i++)
    {
        index <<= 1;

        int fp0 = img[bbox[0] + off[0]];
        int fp1 = img[bbox[0] + off[1]];

        if(fp0 > fp1)
        {
            index |= 1;
        }

        off += 2;
    }

    return index;
}

void calcFeatureVector(int windowIdx, int *featureVector)
{
    for(int i = 0; i < numTrees; i++)
    {
        featureVector[i] = calcFernFeature(windowIdx, i);
    }
}

float calcConfidence(int *featureVector)
{
    float conf = 0.0;

    for(int i = 0; i < numTrees; i++)
    {
        conf += posteriors[i * numIndices + featureVector[i]];
    }

    return conf;
}

void classifyWindow(int windowIdx)
{
    int *featureVector = detectionResult->featureVectors + numTrees * windowIdx;
    calcFeatureVector(windowIdx, featureVector);

    detectionResult->posteriors[windowIdx] = calcConfidence(featureVector);
}

void updatePosterior(int treeIdx, int idx, int positive, int amount)
{
    int arrayIndex = treeIdx * numIndices + idx;
    (positive) ? positives[arrayIndex] += amount : negatives[arrayIndex] += amount;
    posteriors[arrayIndex] = ((float) positives[arrayIndex]) / (positives[arrayIndex] + negatives[arrayIndex]) / 10.0;
}

void updatePosteriors(int *featureVector, int positive, int amount)
{

    for(int i = 0; i < numTrees; i++)
    {

        int idx = featureVector[i];
        updatePosterior(i, idx, positive, amount);

    }
}

void release()
{
    delete[] features;
    features = NULL;
    delete[] featureOffsets;
    featureOffsets = NULL;
    delete[] posteriors;
    posteriors = NULL;
    delete[] positives;
    positives = NULL;
    delete[] negatives;
    negatives = NULL;
}

LIBFUNC(void, init, void) {
  //.. something to do for initialization
    features = NULL;
    featureOffsets = NULL;
    posteriors = NULL;
    positives = NULL;
    negatives = NULL;
    numTrees = 10;
    numFeatures = 10;
	numIndices = pow(2.0f, numFeatures);
	initFeatureLocations();
	initFeatureOffsets();
	initPosteriors();

}
 
LIBFUNC(void, wrapup, void) {
  //.. something to do for finalization
    release();
}

LIBFUNC(void, nextIteration, const cv::Mat &capImg)
{
    img = (const unsigned char *)capImg.data;
}
LIBFUNC(int, filter, int i)
{
    
    classifyWindow(i);

    if(detectionResult->posteriors[i] < 0.5) return false;

    return true;
}
LIBFUNC(void, learn, int* boundary, int positive, int *featureVector)
{
    float conf = calcConfidence(featureVector);

    //Update if positive patch and confidence < 0.5 or negative and conf > 0.5
    if((positive && conf < 0.5) || (!positive && conf > 0.5))
    {
        updatePosteriors(featureVector, positive, 1);
    }
}
